<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  

  <head>
    <title>
      /lang/elisp/twittering-mode/trunk/twittering-mode.el –
      share – Trac
    </title>
        <link rel="search" href="/share/trac.cgi/search" />
        <link rel="help" href="/share/trac.cgi/wiki/TracGuide" />
        <link rel="alternate" href="/share/trac.cgi/browser/lang/elisp/twittering-mode/trunk/twittering-mode.el?format=txt" type="text/plain" title="Plain Text" /><link rel="alternate" href="/share/trac.cgi/export/133/lang/elisp/twittering-mode/trunk/twittering-mode.el" type="text/x-elisp; charset=utf-8" title="Original Format" />
        <link rel="up" href="/share/trac.cgi/browser/lang/elisp/twittering-mode/trunk" title="Parent directory" />
        <link rel="start" href="/share/trac.cgi/wiki" />
        <link rel="stylesheet" href="/share/trac.cgi/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/share/trac.cgi/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/share/trac.cgi/chrome/common/css/browser.css" type="text/css" />
        <link rel="shortcut icon" href="/share/trac.cgi/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/share/trac.cgi/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/share/trac.cgi/search/opensearch" title="Search share" />
    <script type="text/javascript" src="/share/trac.cgi/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/share/trac.cgi/chrome/common/js/trac.js"></script><script type="text/javascript" src="/share/trac.cgi/chrome/common/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/share/trac.cgi/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $("#jumploc input").hide();
        $("#jumploc select").change(function () {
          this.parentNode.parentNode.submit();
        })
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://lambdarepos.org/"><img src="http://lambdarepos.org/images/lambdarepos-logo.png" alt="" /></a>
      </div>
      <form id="search" action="/share/trac.cgi/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/share/trac.cgi/login">Login</a></li><li><a href="/share/trac.cgi/wiki/TracGuide">Help/Guide</a></li><li><a href="/share/trac.cgi/about">About Trac</a></li><li class="last"><a href="/share/trac.cgi/prefs">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/share/trac.cgi/wiki">Wiki</a></li><li><a href="/share/trac.cgi/timeline">Timeline</a></li><li><a href="/share/trac.cgi/roadmap">Roadmap</a></li><li class="active"><a href="/share/trac.cgi/browser">Browse Source</a></li><li><a href="/share/trac.cgi/report">View Tickets</a></li><li class="last"><a href="/share/trac.cgi/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
            <li class="first "><a href="/share/trac.cgi/changeset/81/lang/elisp/twittering-mode/trunk/twittering-mode.el">Last Change</a></li><li><a href="/share/trac.cgi/browser/lang/elisp/twittering-mode/trunk/twittering-mode.el?annotate=blame&amp;rev=81" title="Annotate each line with the last changed revision (this can be time consuming...)">Annotate</a></li><li class="last"><a href="/share/trac.cgi/log/lang/elisp/twittering-mode/trunk/twittering-mode.el">Revision Log</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="browser">
      <h1>
    <a class="pathentry first" title="Go to root directory" href="/share/trac.cgi/browser">root</a><span class="pathentry sep">/</span><a class="pathentry" title="View lang" href="/share/trac.cgi/browser/lang">lang</a><span class="pathentry sep">/</span><a class="pathentry" title="View elisp" href="/share/trac.cgi/browser/lang/elisp">elisp</a><span class="pathentry sep">/</span><a class="pathentry" title="View twittering-mode" href="/share/trac.cgi/browser/lang/elisp/twittering-mode">twittering-mode</a><span class="pathentry sep">/</span><a class="pathentry" title="View trunk" href="/share/trac.cgi/browser/lang/elisp/twittering-mode/trunk">trunk</a><span class="pathentry sep">/</span><a class="pathentry" title="View twittering-mode.el" href="/share/trac.cgi/browser/lang/elisp/twittering-mode/trunk/twittering-mode.el">twittering-mode.el</a>
    <br style="clear: both" />
  </h1>
      <div id="jumprev">
        <form action="" method="get">
          <div>
            <label for="rev">
              View revision:</label>
            <input type="text" id="rev" name="rev" size="6" />
          </div>
        </form>
      </div>
      <table id="info" summary="Revision info">
        <tr>
          <th scope="col">
            Revision <a href="/share/trac.cgi/changeset/81">81</a>, <span title="36956 bytes">36.1 kB</span>
            (checked in by tsuyoshi, <a class="timeline" href="/share/trac.cgi/timeline?from=2009-03-12T09%3A55%3A04Z-0500&amp;precision=second" title="2009-03-12T09:55:04Z-0500 in Timeline">2 months</a> ago)
          </th>
        </tr>
        <tr>
          <td class="message searchable">
              <p>
fix update target. <br />
</p>
          </td>
        </tr>
      </table>
      <div id="preview" class="searchable">
    <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>;;; twittering-mode.el --- Major mode for Twitter</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td>;; Copyright (C) 2007 Yuto Hayamizu.</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td>;;               2008 Tsuyoshi CHO</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td></td></tr><tr><th id="L6"><a href="#L6">6</a></th><td>;; Author: Y. Hayamizu &lt;y.hayamizu@gmail.com&gt;</td></tr><tr><th id="L7"><a href="#L7">7</a></th><td>;;         Tsuyoshi CHO &lt;Tsuyoshi.CHO+develop@Gmail.com&gt;</td></tr><tr><th id="L8"><a href="#L8">8</a></th><td>;; Created: Sep 4, 2007</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td>;; Version: 0.4</td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>;; Keywords: twitter web</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td>;; URL: http://lambdarepos.svnrepository.com/share/trac.cgi/browser/lang/elisp/twittering-mode</td></tr><tr><th id="L12"><a href="#L12">12</a></th><td></td></tr><tr><th id="L13"><a href="#L13">13</a></th><td>;; Modified by Alberto Garcia &lt;agarcia@igalia.com&gt; to add the following methods:</td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>;; twittering-replies-timeline</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>;; twittering-public-timeline</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>;; twittering-user-timeline</td></tr><tr><th id="L17"><a href="#L17">17</a></th><td>;; twittering-current-timeline</td></tr><tr><th id="L18"><a href="#L18">18</a></th><td></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>;; This file is free software; you can redistribute it and/or modify</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>;; it under the terms of the GNU General Public License as published by</td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>;; the Free Software Foundation; either version 2, or (at your option)</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>;; any later version.</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td>;; This file is distributed in the hope that it will be useful,</td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>;; but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td>;; GNU General Public License for more details.</td></tr><tr><th id="L28"><a href="#L28">28</a></th><td></td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>;; You should have received a copy of the GNU General Public License</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td>;; along with GNU Emacs; see the file COPYING.  If not, write to</td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>;; Boston, MA 02111-1307, USA.</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>;;; Commentary:</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td></td></tr><tr><th id="L36"><a href="#L36">36</a></th><td>;; twittering-mode.el is a major mode for Twitter.</td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>;; You can check friends timeline, and update your status on Emacs.</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>;;; Feature Request:</td></tr><tr><th id="L40"><a href="#L40">40</a></th><td></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>;; URL : http://twitter.com/d00dle/statuses/577876082</td></tr><tr><th id="L42"><a href="#L42">42</a></th><td>;; URL : http://twitter.com/d00dle/statuses/577879732</td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>;; * Status Input from Popup buffer and C-cC-c to POST.</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>;; * Mark fav(star)</td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>;; URL : http://code.nanigac.com/source/view/419</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>;; * update status for region</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>;;; Code:</td></tr><tr><th id="L49"><a href="#L49">49</a></th><td></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>(require 'cl)</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>(require 'xml)</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>(require 'parse-time)</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td></td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>(defconst twittering-mode-version "0.6")</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td></td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>(defun twittering-mode-version ()</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>  "Display a message for twittering-mode version."</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td>  (interactive)</td></tr><tr><th id="L59"><a href="#L59">59</a></th><td>  (let ((version-string</td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>         (format "twittering-mode-v%s" twittering-mode-version)))</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>    (if (interactive-p)</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>        (message "%s" version-string)</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>      version-string)))</td></tr><tr><th id="L64"><a href="#L64">64</a></th><td></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>(defvar twittering-mode-map (make-sparse-keymap))</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td></td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>(defvar twittering-timer nil "Timer object for timeline refreshing will be</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>stored here. DO NOT SET VALUE MANUALLY.")</td></tr><tr><th id="L69"><a href="#L69">69</a></th><td></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>(defvar twittering-idle-time 20)</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>(defvar twittering-timer-interval 90)</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td></td></tr><tr><th id="L74"><a href="#L74">74</a></th><td>(defvar twittering-username nil)</td></tr><tr><th id="L75"><a href="#L75">75</a></th><td></td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>(defvar twittering-password nil)</td></tr><tr><th id="L77"><a href="#L77">77</a></th><td></td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>(defvar twittering-last-timeline-retrieved nil)</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>(defvar twittering-scroll-mode nil)</td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>(make-variable-buffer-local 'twittering-scroll-mode)</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td></td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>(defvar twittering-jojo-mode nil)</td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>(make-variable-buffer-local 'twittering-jojo-mode)</td></tr><tr><th id="L85"><a href="#L85">85</a></th><td></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>(defvar twittering-status-format nil)</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>(setq twittering-status-format "%i %s,  %@:\n  %t // from %f%L")</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>;; %s - screen_name</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td>;; %S - name</td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>;; %i - profile_image</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>;; %d - description</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>;; %l - location</td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>;; %L - " [location]"</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>;; %u - url</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>;; %j - user.id</td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>;; %p - protected?</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>;; %c - created_at (raw UTC string)</td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>;; %C{time-format-str} - created_at (formatted with time-format-str)</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>;; %@ - X seconds ago</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>;; %t - text</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>;; %' - truncated</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>;; %f - source</td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>;; %# - id</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>(defvar twittering-buffer "*twittering*")</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>(defun twittering-buffer ()</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>  (twittering-get-or-generate-buffer twittering-buffer))</td></tr><tr><th id="L108"><a href="#L108">108</a></th><td></td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>(defvar twittering-http-buffer "*twittering-http-buffer*")</td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>(defun twittering-http-buffer ()</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>  (twittering-get-or-generate-buffer twittering-http-buffer))</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td></td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>(defvar twittering-timeline-data nil)</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>(defvar twittering-timeline-last-update nil)</td></tr><tr><th id="L115"><a href="#L115">115</a></th><td></td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>(defvar twittering-username-face 'twittering-username-face)</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>(defvar twittering-uri-face 'twittering-uri-face)</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td></td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>(defun twittering-get-or-generate-buffer (buffer)</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>  (if (bufferp buffer)</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>      (if (buffer-live-p buffer)</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>          buffer</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>        (generate-new-buffer (buffer-name buffer)))</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>    (if (stringp buffer)</td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>        (or (get-buffer buffer)</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>            (generate-new-buffer buffer)))))</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td></td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>(defun assocref (item alist)</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>  (cdr (assoc item alist)))</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>(defmacro list-push (value listvar)</td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>  `(setq ,listvar (cons ,value ,listvar)))</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td></td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>;;; Proxy</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>(defvar twittering-proxy-use nil)</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>(defvar twittering-proxy-server nil)</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>(defvar twittering-proxy-port 8080)</td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>(defvar twittering-proxy-user nil)</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>(defvar twittering-proxy-password nil)</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>(defun twittering-toggle-proxy () ""</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>  (interactive)</td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>  (setq twittering-proxy-use</td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>        (not twittering-proxy-use))</td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>  (message "%s %s"</td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>           "Use Proxy:"</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>           (if twittering-proxy-use</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>               "on" "off")))</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td></td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>(defun twittering-user-agent-default-function ()</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>  "Twittering mode default User-Agent function."</td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>  (concat "Emacs/"</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>          (int-to-string emacs-major-version) "." (int-to-string</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>                                                   emacs-minor-version)</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>          " "</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>          "Twittering-mode/"</td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>          twittering-mode-version))</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td></td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>(defvar twittering-user-agent-function 'twittering-user-agent-default-function)</td></tr><tr><th id="L159"><a href="#L159">159</a></th><td></td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>(defun twittering-user-agent ()</td></tr><tr><th id="L161"><a href="#L161">161</a></th><td>  "Return User-Agent header string."</td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>  (funcall twittering-user-agent-function))</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td></td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>;;; to show image files</td></tr><tr><th id="L165"><a href="#L165">165</a></th><td></td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>(defvar twittering-wget-buffer "*twittering-wget-buffer*")</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>(defun twittering-wget-buffer ()</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>  (twittering-get-or-generate-buffer twittering-wget-buffer))</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>(defvar twittering-tmp-dir</td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>  (expand-file-name (concat "twmode-images-" (user-login-name))</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>                    temporary-file-directory))</td></tr><tr><th id="L173"><a href="#L173">173</a></th><td></td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>(defvar twittering-icon-mode nil "You MUST NOT CHANGE this variable</td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>directory. You should change through function'twittering-icon-mode'")</td></tr><tr><th id="L176"><a href="#L176">176</a></th><td></td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>(make-variable-buffer-local 'twittering-icon-mode)</td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>(defun twittering-icon-mode (&amp;optional arg)</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>  (interactive)</td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>  (setq twittering-icon-mode</td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>        (if twittering-icon-mode</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>            (if (null arg)</td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>                nil</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>              (&gt; (prefix-numeric-value arg) 0))</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>          (when (or (null arg)</td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>                    (and arg (&gt; (prefix-numeric-value arg) 0)))</td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>            (when (file-writable-p twittering-tmp-dir)</td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>              (progn</td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>                (if (not (file-directory-p twittering-tmp-dir))</td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>                    (make-directory twittering-tmp-dir))</td></tr><tr><th id="L191"><a href="#L191">191</a></th><td>                t)))))</td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>  (twittering-render-timeline))</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>(defun twittering-scroll-mode (&amp;optional arg)</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>  (interactive)</td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>  (setq twittering-scroll-mode</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>        (if (null arg)</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>            (not twittering-scroll-mode)</td></tr><tr><th id="L199"><a href="#L199">199</a></th><td>          (&gt; (prefix-numeric-value arg) 0))))</td></tr><tr><th id="L200"><a href="#L200">200</a></th><td></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>(defun twittering-jojo-mode (&amp;optional arg)</td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>  (interactive)</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>  (setq twittering-jojo-mode</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>        (if (null arg)</td></tr><tr><th id="L205"><a href="#L205">205</a></th><td>            (not twittering-jojo-mode)</td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>          (&gt; (prefix-numeric-value arg) 0))))</td></tr><tr><th id="L207"><a href="#L207">207</a></th><td></td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>(defvar twittering-image-stack nil)</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td></td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>(defun twittering-image-type (file-name)</td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>  (cond</td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>   ((string-match "\\.jpe?g" file-name) 'jpeg)</td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>   ((string-match "\\.png" file-name) 'png)</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td>   ((string-match "\\.gif" file-name) 'gif)</td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>   (t nil)))</td></tr><tr><th id="L216"><a href="#L216">216</a></th><td></td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>(defun twittering-setftime (fmt string uni)</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>  (format-time-string fmt ; like "%Y-%m-%d %H:%M:%S"</td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>                      (apply 'encode-time (parse-time-string string))</td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>                      uni))</td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>(defun twittering-local-strftime (fmt string)</td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>  (twittering-setftime fmt string nil))</td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>(defun twittering-global-strftime (fmt string)</td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>  (twittering-setftime fmt string t))</td></tr><tr><th id="L225"><a href="#L225">225</a></th><td></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>(defvar twittering-debug-mode nil)</td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>(defvar twittering-debug-buffer "*debug*")</td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>(defun twittering-debug-buffer ()</td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>  (twittering-get-or-generate-buffer twittering-debug-buffer))</td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>(defmacro debug-print (obj)</td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>  (let ((obsym (gensym)))</td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>    `(let ((,obsym ,obj))</td></tr><tr><th id="L234"><a href="#L234">234</a></th><td>       (if twittering-debug-mode</td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>           (with-current-buffer (twittering-debug-buffer)</td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>             (insert (prin1-to-string ,obsym))</td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>             (newline)</td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>             ,obsym)</td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>         ,obsym))))</td></tr><tr><th id="L240"><a href="#L240">240</a></th><td></td></tr><tr><th id="L241"><a href="#L241">241</a></th><td>(defun twittering-debug-mode ()</td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>  (interactive)</td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>  (setq twittering-debug-mode</td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>        (not twittering-debug-mode))</td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>  (message (if twittering-debug-mode "debug mode:on" "debug mode:off")))</td></tr><tr><th id="L246"><a href="#L246">246</a></th><td></td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>(if twittering-mode-map</td></tr><tr><th id="L248"><a href="#L248">248</a></th><td>    (let ((km twittering-mode-map))</td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>      (define-key km "\C-c\C-f" 'twittering-friends-timeline)</td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>      (define-key km "\C-c\C-r" 'twittering-replies-timeline)</td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>      (define-key km "\C-c\C-g" 'twittering-public-timeline)</td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>      (define-key km "\C-c\C-u" 'twittering-user-timeline)</td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>      (define-key km "\C-c\C-s" 'twittering-update-status-interactive)</td></tr><tr><th id="L254"><a href="#L254">254</a></th><td>      (define-key km "\C-c\C-e" 'twittering-erase-old-statuses)</td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>      (define-key km "\C-m" 'twittering-enter)</td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>      (define-key km "\C-c\C-l" 'twittering-update-lambda)</td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>      (define-key km [mouse-1] 'twittering-click)</td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>      (define-key km "\C-c\C-v" 'twittering-view-user-page)</td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>      (define-key km "g" 'twittering-current-timeline)</td></tr><tr><th id="L260"><a href="#L260">260</a></th><td>      ;; (define-key km "j" 'next-line)</td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>      ;; (define-key km "k" 'previous-line)</td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>      (define-key km "j" 'twittering-goto-next-status)</td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>      (define-key km "k" 'twittering-goto-previous-status)</td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>      (define-key km "l" 'forward-char)</td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>      (define-key km "h" 'backward-char)</td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>      (define-key km "0" 'beginning-of-line)</td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>      (define-key km "^" 'beginning-of-line-text)</td></tr><tr><th id="L268"><a href="#L268">268</a></th><td>      (define-key km "$" 'end-of-line)</td></tr><tr><th id="L269"><a href="#L269">269</a></th><td>      (define-key km "n" 'twittering-goto-next-status-of-user)</td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>      (define-key km "p" 'twittering-goto-previous-status-of-user)</td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>      (define-key km [backspace] 'backward-char)</td></tr><tr><th id="L272"><a href="#L272">272</a></th><td>      (define-key km "G" 'end-of-buffer)</td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>      (define-key km "H" 'beginning-of-buffer)</td></tr><tr><th id="L274"><a href="#L274">274</a></th><td>      (define-key km "i" 'twittering-icon-mode)</td></tr><tr><th id="L275"><a href="#L275">275</a></th><td>      (define-key km "s" 'twittering-scroll-mode)</td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>      (define-key km "t" 'twittering-toggle-proxy)</td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>      (define-key km "\C-c\C-p" 'twittering-toggle-proxy)</td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>      nil))</td></tr><tr><th id="L279"><a href="#L279">279</a></th><td></td></tr><tr><th id="L280"><a href="#L280">280</a></th><td>(defvar twittering-mode-syntax-table nil "")</td></tr><tr><th id="L281"><a href="#L281">281</a></th><td></td></tr><tr><th id="L282"><a href="#L282">282</a></th><td>(if twittering-mode-syntax-table</td></tr><tr><th id="L283"><a href="#L283">283</a></th><td>    ()</td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>  (setq twittering-mode-syntax-table (make-syntax-table))</td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>  ;; (modify-syntax-entry ?  "" twittering-mode-syntax-table)</td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>  (modify-syntax-entry ?\" "w"  twittering-mode-syntax-table)</td></tr><tr><th id="L287"><a href="#L287">287</a></th><td>  )</td></tr><tr><th id="L288"><a href="#L288">288</a></th><td></td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>(defun twittering-mode-init-variables ()</td></tr><tr><th id="L290"><a href="#L290">290</a></th><td>  ;; (make-variable-buffer-local 'variable)</td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>  ;; (setq variable nil)</td></tr><tr><th id="L292"><a href="#L292">292</a></th><td>  (font-lock-mode -1)</td></tr><tr><th id="L293"><a href="#L293">293</a></th><td>  (defface twittering-username-face</td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>    `((t nil)) "" :group 'faces)</td></tr><tr><th id="L295"><a href="#L295">295</a></th><td>  (copy-face 'font-lock-string-face 'twittering-username-face)</td></tr><tr><th id="L296"><a href="#L296">296</a></th><td>  (set-face-attribute 'twittering-username-face nil :underline t)</td></tr><tr><th id="L297"><a href="#L297">297</a></th><td>  (defface twittering-uri-face</td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>    `((t nil)) "" :group 'faces)</td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>  (set-face-attribute 'twittering-uri-face nil :underline t)</td></tr><tr><th id="L300"><a href="#L300">300</a></th><td>  (add-to-list 'minor-mode-alist '(twittering-icon-mode " tw-icon"))</td></tr><tr><th id="L301"><a href="#L301">301</a></th><td>  (add-to-list 'minor-mode-alist '(twittering-scroll-mode " tw-scroll"))</td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>  (add-to-list 'minor-mode-alist '(twittering-jojo-mode " tw-jojo"))</td></tr><tr><th id="L303"><a href="#L303">303</a></th><td>  )</td></tr><tr><th id="L304"><a href="#L304">304</a></th><td></td></tr><tr><th id="L305"><a href="#L305">305</a></th><td>(defmacro case-string (str &amp;rest clauses)</td></tr><tr><th id="L306"><a href="#L306">306</a></th><td>  `(cond</td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>    ,@(mapcar</td></tr><tr><th id="L308"><a href="#L308">308</a></th><td>       (lambda (clause)</td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>         (let ((keylist (car clause))</td></tr><tr><th id="L310"><a href="#L310">310</a></th><td>               (body (cdr clause)))</td></tr><tr><th id="L311"><a href="#L311">311</a></th><td>           `(,(if (listp keylist)</td></tr><tr><th id="L312"><a href="#L312">312</a></th><td>                  `(or ,@(mapcar (lambda (key) `(string-equal ,str ,key))</td></tr><tr><th id="L313"><a href="#L313">313</a></th><td>                                 keylist))</td></tr><tr><th id="L314"><a href="#L314">314</a></th><td>                't)</td></tr><tr><th id="L315"><a href="#L315">315</a></th><td>             ,@body)))</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td>       clauses)))</td></tr><tr><th id="L317"><a href="#L317">317</a></th><td></td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>;; If you use Emacs21, decode-char 'ucs will fail unless Mule-UCS is loaded.</td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>;; TODO: Show error messages if Emacs 21 without Mule-UCS</td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>(defmacro twittering-ucs-to-char (num)</td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>  (if (functionp 'ucs-to-char)</td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>      `(ucs-to-char ,num)</td></tr><tr><th id="L323"><a href="#L323">323</a></th><td>    `(decode-char 'ucs ,num)))</td></tr><tr><th id="L324"><a href="#L324">324</a></th><td></td></tr><tr><th id="L325"><a href="#L325">325</a></th><td>(defvar twittering-mode-string "Twittering mode")</td></tr><tr><th id="L326"><a href="#L326">326</a></th><td></td></tr><tr><th id="L327"><a href="#L327">327</a></th><td>(defvar twittering-mode-hook nil</td></tr><tr><th id="L328"><a href="#L328">328</a></th><td>  "Twittering-mode hook.")</td></tr><tr><th id="L329"><a href="#L329">329</a></th><td></td></tr><tr><th id="L330"><a href="#L330">330</a></th><td>(defun twittering-mode ()</td></tr><tr><th id="L331"><a href="#L331">331</a></th><td>  "Major mode for Twitter</td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>\\{twittering-mode-map}"</td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>  (interactive)</td></tr><tr><th id="L334"><a href="#L334">334</a></th><td>  (switch-to-buffer (twittering-buffer))</td></tr><tr><th id="L335"><a href="#L335">335</a></th><td>  (kill-all-local-variables)</td></tr><tr><th id="L336"><a href="#L336">336</a></th><td>  (twittering-mode-init-variables)</td></tr><tr><th id="L337"><a href="#L337">337</a></th><td>  (use-local-map twittering-mode-map)</td></tr><tr><th id="L338"><a href="#L338">338</a></th><td>  (setq major-mode 'twittering-mode)</td></tr><tr><th id="L339"><a href="#L339">339</a></th><td>  (setq mode-name twittering-mode-string)</td></tr><tr><th id="L340"><a href="#L340">340</a></th><td>  (set-syntax-table twittering-mode-syntax-table)</td></tr><tr><th id="L341"><a href="#L341">341</a></th><td>  (run-hooks 'twittering-mode-hook)</td></tr><tr><th id="L342"><a href="#L342">342</a></th><td>  (font-lock-mode -1)</td></tr><tr><th id="L343"><a href="#L343">343</a></th><td>  (twittering-start))</td></tr><tr><th id="L344"><a href="#L344">344</a></th><td></td></tr><tr><th id="L345"><a href="#L345">345</a></th><td>;;;</td></tr><tr><th id="L346"><a href="#L346">346</a></th><td>;;; Basic HTTP functions</td></tr><tr><th id="L347"><a href="#L347">347</a></th><td>;;;</td></tr><tr><th id="L348"><a href="#L348">348</a></th><td></td></tr><tr><th id="L349"><a href="#L349">349</a></th><td>(defun twittering-http-get (method-class method &amp;optional parameters sentinel)</td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>  (if (null sentinel) (setq sentinel 'twittering-http-get-default-sentinel))</td></tr><tr><th id="L351"><a href="#L351">351</a></th><td></td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>  ;; clear the buffer</td></tr><tr><th id="L353"><a href="#L353">353</a></th><td>  (save-excursion</td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>    (set-buffer (twittering-http-buffer))</td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>    (erase-buffer))</td></tr><tr><th id="L356"><a href="#L356">356</a></th><td></td></tr><tr><th id="L357"><a href="#L357">357</a></th><td>  (let (proc server port</td></tr><tr><th id="L358"><a href="#L358">358</a></th><td>             (proxy-user twittering-proxy-user)</td></tr><tr><th id="L359"><a href="#L359">359</a></th><td>             (proxy-password twittering-proxy-password))</td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>    (condition-case nil</td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>        (progn</td></tr><tr><th id="L362"><a href="#L362">362</a></th><td>          (if (and twittering-proxy-use twittering-proxy-server)</td></tr><tr><th id="L363"><a href="#L363">363</a></th><td>              (setq server twittering-proxy-server</td></tr><tr><th id="L364"><a href="#L364">364</a></th><td>                    port (if (integerp twittering-proxy-port)</td></tr><tr><th id="L365"><a href="#L365">365</a></th><td>                             (int-to-string twittering-proxy-port)</td></tr><tr><th id="L366"><a href="#L366">366</a></th><td>                           twittering-proxy-port))</td></tr><tr><th id="L367"><a href="#L367">367</a></th><td>            (setq server "twitter.com"</td></tr><tr><th id="L368"><a href="#L368">368</a></th><td>                  port "80"))</td></tr><tr><th id="L369"><a href="#L369">369</a></th><td>          (setq proc</td></tr><tr><th id="L370"><a href="#L370">370</a></th><td>                (open-network-stream</td></tr><tr><th id="L371"><a href="#L371">371</a></th><td>                 "network-connection-process" (twittering-http-buffer)</td></tr><tr><th id="L372"><a href="#L372">372</a></th><td>                 server (string-to-number port)))</td></tr><tr><th id="L373"><a href="#L373">373</a></th><td>          (set-process-sentinel proc sentinel)</td></tr><tr><th id="L374"><a href="#L374">374</a></th><td>          (process-send-string</td></tr><tr><th id="L375"><a href="#L375">375</a></th><td>           proc</td></tr><tr><th id="L376"><a href="#L376">376</a></th><td>           (let ((nl "\r\n")</td></tr><tr><th id="L377"><a href="#L377">377</a></th><td>                 request)</td></tr><tr><th id="L378"><a href="#L378">378</a></th><td>             (setq request</td></tr><tr><th id="L379"><a href="#L379">379</a></th><td>                   (concat "GET http://twitter.com/" method-class "/" method</td></tr><tr><th id="L380"><a href="#L380">380</a></th><td>                           ".xml"</td></tr><tr><th id="L381"><a href="#L381">381</a></th><td>                           (when parameters</td></tr><tr><th id="L382"><a href="#L382">382</a></th><td>                             (concat "?"</td></tr><tr><th id="L383"><a href="#L383">383</a></th><td>                                     (mapconcat</td></tr><tr><th id="L384"><a href="#L384">384</a></th><td>                                      (lambda (param-pair)</td></tr><tr><th id="L385"><a href="#L385">385</a></th><td>                                        (format "%s=%s"</td></tr><tr><th id="L386"><a href="#L386">386</a></th><td>                                                (twittering-percent-encode (car</td></tr><tr><th id="L387"><a href="#L387">387</a></th><td>                                                                            param-pair))</td></tr><tr><th id="L388"><a href="#L388">388</a></th><td>                                                (twittering-percent-encode (cdr</td></tr><tr><th id="L389"><a href="#L389">389</a></th><td>                                                                            param-pair))))</td></tr><tr><th id="L390"><a href="#L390">390</a></th><td>                                      parameters</td></tr><tr><th id="L391"><a href="#L391">391</a></th><td>                                      "&amp;")))</td></tr><tr><th id="L392"><a href="#L392">392</a></th><td>                           " HTTP/1.1" nl</td></tr><tr><th id="L393"><a href="#L393">393</a></th><td>                           "Host: twitter.com" nl</td></tr><tr><th id="L394"><a href="#L394">394</a></th><td>                           "User-Agent: " (twittering-user-agent) nl</td></tr><tr><th id="L395"><a href="#L395">395</a></th><td>                           "Authorization: Basic "</td></tr><tr><th id="L396"><a href="#L396">396</a></th><td>                           (base64-encode-string</td></tr><tr><th id="L397"><a href="#L397">397</a></th><td>                            (concat twittering-username ":"</td></tr><tr><th id="L398"><a href="#L398">398</a></th><td>                                    (twittering-get-password)))</td></tr><tr><th id="L399"><a href="#L399">399</a></th><td>                           nl</td></tr><tr><th id="L400"><a href="#L400">400</a></th><td>                           "Accept: text/xml"</td></tr><tr><th id="L401"><a href="#L401">401</a></th><td>                           ",application/xml"</td></tr><tr><th id="L402"><a href="#L402">402</a></th><td>                           ",application/xhtml+xml"</td></tr><tr><th id="L403"><a href="#L403">403</a></th><td>                           ",application/html;q=0.9"</td></tr><tr><th id="L404"><a href="#L404">404</a></th><td>                           ",text/plain;q=0.8"</td></tr><tr><th id="L405"><a href="#L405">405</a></th><td>                           ",image/png,*/*;q=0.5" nl</td></tr><tr><th id="L406"><a href="#L406">406</a></th><td>                           "Accept-Charset: utf-8;q=0.7,*;q=0.7" nl</td></tr><tr><th id="L407"><a href="#L407">407</a></th><td>                           (when twittering-proxy-use</td></tr><tr><th id="L408"><a href="#L408">408</a></th><td>                             "Proxy-Connection: Keep-Alive" nl</td></tr><tr><th id="L409"><a href="#L409">409</a></th><td>                             (when (and proxy-user proxy-password)</td></tr><tr><th id="L410"><a href="#L410">410</a></th><td>                               (concat</td></tr><tr><th id="L411"><a href="#L411">411</a></th><td>                                "Proxy-Authorization: Basic "</td></tr><tr><th id="L412"><a href="#L412">412</a></th><td>                                (base64-encode-string</td></tr><tr><th id="L413"><a href="#L413">413</a></th><td>                                 (concat proxy-user ":"</td></tr><tr><th id="L414"><a href="#L414">414</a></th><td>                                         proxy-password))</td></tr><tr><th id="L415"><a href="#L415">415</a></th><td>                                nl)))</td></tr><tr><th id="L416"><a href="#L416">416</a></th><td>                           nl))</td></tr><tr><th id="L417"><a href="#L417">417</a></th><td>             (debug-print (concat "GET Request\n" request))</td></tr><tr><th id="L418"><a href="#L418">418</a></th><td>             request)))</td></tr><tr><th id="L419"><a href="#L419">419</a></th><td>      (error</td></tr><tr><th id="L420"><a href="#L420">420</a></th><td>       (message "Failure: HTTP GET") nil))))</td></tr><tr><th id="L421"><a href="#L421">421</a></th><td></td></tr><tr><th id="L422"><a href="#L422">422</a></th><td>(defun twittering-http-get-default-sentinel (proc stat &amp;optional suc-msg)</td></tr><tr><th id="L423"><a href="#L423">423</a></th><td>  (let ((header (twittering-get-response-header))</td></tr><tr><th id="L424"><a href="#L424">424</a></th><td>        (body (twittering-get-response-body))</td></tr><tr><th id="L425"><a href="#L425">425</a></th><td>        (status nil)</td></tr><tr><th id="L426"><a href="#L426">426</a></th><td>        )</td></tr><tr><th id="L427"><a href="#L427">427</a></th><td>    (if (string-match "HTTP/1\.[01] \\([a-z0-9 ]+\\)\r?\n" header)</td></tr><tr><th id="L428"><a href="#L428">428</a></th><td>        (progn</td></tr><tr><th id="L429"><a href="#L429">429</a></th><td>          (setq status (match-string-no-properties 1 header))</td></tr><tr><th id="L430"><a href="#L430">430</a></th><td>          (case-string</td></tr><tr><th id="L431"><a href="#L431">431</a></th><td>           status</td></tr><tr><th id="L432"><a href="#L432">432</a></th><td>           (("200 OK")</td></tr><tr><th id="L433"><a href="#L433">433</a></th><td>            (mapcar</td></tr><tr><th id="L434"><a href="#L434">434</a></th><td>             #'twittering-cache-status-datum</td></tr><tr><th id="L435"><a href="#L435">435</a></th><td>             (reverse (twittering-xmltree-to-status</td></tr><tr><th id="L436"><a href="#L436">436</a></th><td>                       body)))</td></tr><tr><th id="L437"><a href="#L437">437</a></th><td>            (twittering-render-timeline)</td></tr><tr><th id="L438"><a href="#L438">438</a></th><td>            (message (if suc-msg suc-msg "Success: Get.")))</td></tr><tr><th id="L439"><a href="#L439">439</a></th><td>           (t (message status))))</td></tr><tr><th id="L440"><a href="#L440">440</a></th><td>      (message "Failure: Bad http response.")))</td></tr><tr><th id="L441"><a href="#L441">441</a></th><td>  )</td></tr><tr><th id="L442"><a href="#L442">442</a></th><td></td></tr><tr><th id="L443"><a href="#L443">443</a></th><td>(defun twittering-render-timeline ()</td></tr><tr><th id="L444"><a href="#L444">444</a></th><td>  (with-current-buffer (twittering-buffer)</td></tr><tr><th id="L445"><a href="#L445">445</a></th><td>    (let ((point (point))</td></tr><tr><th id="L446"><a href="#L446">446</a></th><td>          (end (point-max)))</td></tr><tr><th id="L447"><a href="#L447">447</a></th><td>      (setq buffer-read-only nil)</td></tr><tr><th id="L448"><a href="#L448">448</a></th><td>      (erase-buffer)</td></tr><tr><th id="L449"><a href="#L449">449</a></th><td>      (mapc (lambda (status)</td></tr><tr><th id="L450"><a href="#L450">450</a></th><td>              (insert (twittering-format-status</td></tr><tr><th id="L451"><a href="#L451">451</a></th><td>                       status twittering-status-format))</td></tr><tr><th id="L452"><a href="#L452">452</a></th><td>              (fill-region-as-paragraph</td></tr><tr><th id="L453"><a href="#L453">453</a></th><td>               (save-excursion (beginning-of-line) (point)) (point))</td></tr><tr><th id="L454"><a href="#L454">454</a></th><td>              (insert "\n"))</td></tr><tr><th id="L455"><a href="#L455">455</a></th><td>            twittering-timeline-data)</td></tr><tr><th id="L456"><a href="#L456">456</a></th><td>      (if twittering-image-stack</td></tr><tr><th id="L457"><a href="#L457">457</a></th><td>          (clear-image-cache))</td></tr><tr><th id="L458"><a href="#L458">458</a></th><td>      (setq buffer-read-only t)</td></tr><tr><th id="L459"><a href="#L459">459</a></th><td>      (debug-print (current-buffer))</td></tr><tr><th id="L460"><a href="#L460">460</a></th><td>      (goto-char (+ point (if twittering-scroll-mode (- (point-max) end) 0))))</td></tr><tr><th id="L461"><a href="#L461">461</a></th><td>    ))</td></tr><tr><th id="L462"><a href="#L462">462</a></th><td></td></tr><tr><th id="L463"><a href="#L463">463</a></th><td>(defun twittering-format-status (status format-str)</td></tr><tr><th id="L464"><a href="#L464">464</a></th><td>  (flet ((attr (key)</td></tr><tr><th id="L465"><a href="#L465">465</a></th><td>               (assocref key status))</td></tr><tr><th id="L466"><a href="#L466">466</a></th><td>         (profile-image</td></tr><tr><th id="L467"><a href="#L467">467</a></th><td>          ()</td></tr><tr><th id="L468"><a href="#L468">468</a></th><td>          (let ((profile-image-url (attr 'user-profile-image-url))</td></tr><tr><th id="L469"><a href="#L469">469</a></th><td>                (icon-string "\n  "))</td></tr><tr><th id="L470"><a href="#L470">470</a></th><td>            (if (string-match "/\\([^/?]+\\)\\(?:\\?\\|$\\)" profile-image-url)</td></tr><tr><th id="L471"><a href="#L471">471</a></th><td>                (let ((filename (match-string-no-properties 1</td></tr><tr><th id="L472"><a href="#L472">472</a></th><td>                                                            profile-image-url)))</td></tr><tr><th id="L473"><a href="#L473">473</a></th><td>                  ;; download icons if does not exist</td></tr><tr><th id="L474"><a href="#L474">474</a></th><td>                  (if (file-exists-p (concat twittering-tmp-dir</td></tr><tr><th id="L475"><a href="#L475">475</a></th><td>                                             "/" filename))</td></tr><tr><th id="L476"><a href="#L476">476</a></th><td>                      t</td></tr><tr><th id="L477"><a href="#L477">477</a></th><td>                    (add-to-list 'twittering-image-stack profile-image-url))</td></tr><tr><th id="L478"><a href="#L478">478</a></th><td></td></tr><tr><th id="L479"><a href="#L479">479</a></th><td>                  (when (and icon-string twittering-icon-mode)</td></tr><tr><th id="L480"><a href="#L480">480</a></th><td>                    (set-text-properties</td></tr><tr><th id="L481"><a href="#L481">481</a></th><td>                     1 2 `(display</td></tr><tr><th id="L482"><a href="#L482">482</a></th><td>                           (image :type ,(twittering-image-type filename)</td></tr><tr><th id="L483"><a href="#L483">483</a></th><td>                                  :file ,(concat twittering-tmp-dir</td></tr><tr><th id="L484"><a href="#L484">484</a></th><td>                                                 "/"</td></tr><tr><th id="L485"><a href="#L485">485</a></th><td>                                                 filename)))</td></tr><tr><th id="L486"><a href="#L486">486</a></th><td>                     icon-string)</td></tr><tr><th id="L487"><a href="#L487">487</a></th><td>                    icon-string)</td></tr><tr><th id="L488"><a href="#L488">488</a></th><td>                  )))))</td></tr><tr><th id="L489"><a href="#L489">489</a></th><td>    (let ((cursor 0)</td></tr><tr><th id="L490"><a href="#L490">490</a></th><td>          (result ())</td></tr><tr><th id="L491"><a href="#L491">491</a></th><td>          c</td></tr><tr><th id="L492"><a href="#L492">492</a></th><td>          found-at)</td></tr><tr><th id="L493"><a href="#L493">493</a></th><td>      (setq cursor 0)</td></tr><tr><th id="L494"><a href="#L494">494</a></th><td>      (setq result '())</td></tr><tr><th id="L495"><a href="#L495">495</a></th><td>      (while (setq found-at (string-match "%\\(C{\\([^}]+\\)}\\|[A-Za-z#@']\\)"</td></tr><tr><th id="L496"><a href="#L496">496</a></th><td>                                          format-str cursor))</td></tr><tr><th id="L497"><a href="#L497">497</a></th><td>        (setq c (string-to-char (match-string-no-properties 1 format-str)))</td></tr><tr><th id="L498"><a href="#L498">498</a></th><td>        (if (&gt; found-at cursor)</td></tr><tr><th id="L499"><a href="#L499">499</a></th><td>            (list-push (substring format-str cursor found-at) result)</td></tr><tr><th id="L500"><a href="#L500">500</a></th><td>          "|")</td></tr><tr><th id="L501"><a href="#L501">501</a></th><td>        (setq cursor (match-end 1))</td></tr><tr><th id="L502"><a href="#L502">502</a></th><td></td></tr><tr><th id="L503"><a href="#L503">503</a></th><td>        (case c</td></tr><tr><th id="L504"><a href="#L504">504</a></th><td>          ((?s)                         ; %s - screen_name</td></tr><tr><th id="L505"><a href="#L505">505</a></th><td>           (list-push (attr 'user-screen-name) result))</td></tr><tr><th id="L506"><a href="#L506">506</a></th><td>          ((?S)                         ; %S - name</td></tr><tr><th id="L507"><a href="#L507">507</a></th><td>           (list-push (attr 'user-name) result))</td></tr><tr><th id="L508"><a href="#L508">508</a></th><td>          ((?i)                         ; %i - profile_image</td></tr><tr><th id="L509"><a href="#L509">509</a></th><td>           (list-push (profile-image) result))</td></tr><tr><th id="L510"><a href="#L510">510</a></th><td>          ((?d)                         ; %d - description</td></tr><tr><th id="L511"><a href="#L511">511</a></th><td>           (list-push (attr 'user-description) result))</td></tr><tr><th id="L512"><a href="#L512">512</a></th><td>          ((?l)                         ; %l - location</td></tr><tr><th id="L513"><a href="#L513">513</a></th><td>           (list-push (attr 'user-location) result))</td></tr><tr><th id="L514"><a href="#L514">514</a></th><td>          ((?L)                         ; %L - " [location]"</td></tr><tr><th id="L515"><a href="#L515">515</a></th><td>           (let ((location (attr 'user-location)))</td></tr><tr><th id="L516"><a href="#L516">516</a></th><td>             (unless (or (null location) (string= "" location))</td></tr><tr><th id="L517"><a href="#L517">517</a></th><td>               (list-push (concat " [" location "]") result)) ))</td></tr><tr><th id="L518"><a href="#L518">518</a></th><td>          ((?u)                         ; %u - url</td></tr><tr><th id="L519"><a href="#L519">519</a></th><td>           (list-push (attr 'user-url) result))</td></tr><tr><th id="L520"><a href="#L520">520</a></th><td>          ((?j)                         ; %j - user.id</td></tr><tr><th id="L521"><a href="#L521">521</a></th><td>           (list-push (format "%d" (attr 'user-id)) result))</td></tr><tr><th id="L522"><a href="#L522">522</a></th><td>          ((?p)                         ; %p - protected?</td></tr><tr><th id="L523"><a href="#L523">523</a></th><td>           (let ((protected (attr 'user-protected)))</td></tr><tr><th id="L524"><a href="#L524">524</a></th><td>             (when (string= "true" protected)</td></tr><tr><th id="L525"><a href="#L525">525</a></th><td>               (list-push "[x]" result))))</td></tr><tr><th id="L526"><a href="#L526">526</a></th><td>          ((?c)                     ; %c - created_at (raw UTC string)</td></tr><tr><th id="L527"><a href="#L527">527</a></th><td>           (list-push (attr 'created-at) result))</td></tr><tr><th id="L528"><a href="#L528">528</a></th><td>          ((?C) ; %C{time-format-str} - created_at (formatted with</td></tr><tr><th id="L529"><a href="#L529">529</a></th><td>                ; time-format-str)</td></tr><tr><th id="L530"><a href="#L530">530</a></th><td>           (list-push (twittering-local-strftime</td></tr><tr><th id="L531"><a href="#L531">531</a></th><td>                       (or (match-string-no-properties 2 format-str) "%H:%M:%S")</td></tr><tr><th id="L532"><a href="#L532">532</a></th><td>                       (attr 'created-at))</td></tr><tr><th id="L533"><a href="#L533">533</a></th><td>                      result))</td></tr><tr><th id="L534"><a href="#L534">534</a></th><td>          ((?@)                         ; %@ - X seconds ago</td></tr><tr><th id="L535"><a href="#L535">535</a></th><td>           (let ((created-at</td></tr><tr><th id="L536"><a href="#L536">536</a></th><td>                  (apply</td></tr><tr><th id="L537"><a href="#L537">537</a></th><td>                   'encode-time</td></tr><tr><th id="L538"><a href="#L538">538</a></th><td>                   (parse-time-string (attr 'created-at))))</td></tr><tr><th id="L539"><a href="#L539">539</a></th><td>                 (now (current-time)))</td></tr><tr><th id="L540"><a href="#L540">540</a></th><td>             (let ((secs (+ (* (- (car now) (car created-at)) 65536)</td></tr><tr><th id="L541"><a href="#L541">541</a></th><td>                            (- (cadr now) (cadr created-at))))</td></tr><tr><th id="L542"><a href="#L542">542</a></th><td>                   time-string url)</td></tr><tr><th id="L543"><a href="#L543">543</a></th><td>               (setq time-string</td></tr><tr><th id="L544"><a href="#L544">544</a></th><td>                     (cond ((&lt; secs 5) "less than 5 seconds ago")</td></tr><tr><th id="L545"><a href="#L545">545</a></th><td>                           ((&lt; secs 10) "less than 10 seconds ago")</td></tr><tr><th id="L546"><a href="#L546">546</a></th><td>                           ((&lt; secs 20) "less than 20 seconds ago")</td></tr><tr><th id="L547"><a href="#L547">547</a></th><td>                           ((&lt; secs 30) "half a minute ago")</td></tr><tr><th id="L548"><a href="#L548">548</a></th><td>                           ((&lt; secs 60) "less than a minute ago")</td></tr><tr><th id="L549"><a href="#L549">549</a></th><td>                           ((&lt; secs 150) "1 minute ago")</td></tr><tr><th id="L550"><a href="#L550">550</a></th><td>                           ((&lt; secs 2400) (format "%d minutes ago"</td></tr><tr><th id="L551"><a href="#L551">551</a></th><td>                                                  (/ (+ secs 30) 60)))</td></tr><tr><th id="L552"><a href="#L552">552</a></th><td>                           ((&lt; secs 5400) "about 1 hour ago")</td></tr><tr><th id="L553"><a href="#L553">553</a></th><td>                           ((&lt; secs 84600) (format "about %d hours ago"</td></tr><tr><th id="L554"><a href="#L554">554</a></th><td>                                                   (/ (+ secs 1800) 3600)))</td></tr><tr><th id="L555"><a href="#L555">555</a></th><td>                           (t (format-time-string "%I:%M %p %B %d, %Y"</td></tr><tr><th id="L556"><a href="#L556">556</a></th><td>                                                  created-at))))</td></tr><tr><th id="L557"><a href="#L557">557</a></th><td>               (setq url (twittering-get-status-url (attr 'user-screen-name)</td></tr><tr><th id="L558"><a href="#L558">558</a></th><td>                                                    (attr 'id)))</td></tr><tr><th id="L559"><a href="#L559">559</a></th><td>               ;; make status url clickable</td></tr><tr><th id="L560"><a href="#L560">560</a></th><td>               (add-text-properties</td></tr><tr><th id="L561"><a href="#L561">561</a></th><td>                0 (length time-string)</td></tr><tr><th id="L562"><a href="#L562">562</a></th><td>                `(mouse-face highlight</td></tr><tr><th id="L563"><a href="#L563">563</a></th><td>                             face twittering-uri-face</td></tr><tr><th id="L564"><a href="#L564">564</a></th><td>                             uri ,url)</td></tr><tr><th id="L565"><a href="#L565">565</a></th><td>                time-string)</td></tr><tr><th id="L566"><a href="#L566">566</a></th><td>               (list-push time-string result))))</td></tr><tr><th id="L567"><a href="#L567">567</a></th><td>          ((?t)                         ; %t - text</td></tr><tr><th id="L568"><a href="#L568">568</a></th><td>           (list-push                   ;(clickable-text)</td></tr><tr><th id="L569"><a href="#L569">569</a></th><td>            (attr 'text)</td></tr><tr><th id="L570"><a href="#L570">570</a></th><td>            result))</td></tr><tr><th id="L571"><a href="#L571">571</a></th><td>          ((?')                         ; %' - truncated</td></tr><tr><th id="L572"><a href="#L572">572</a></th><td>           (let ((truncated (attr 'truncated)))</td></tr><tr><th id="L573"><a href="#L573">573</a></th><td>             (when (string= "true" truncated)</td></tr><tr><th id="L574"><a href="#L574">574</a></th><td>               (list-push "..." result))))</td></tr><tr><th id="L575"><a href="#L575">575</a></th><td>          ((?f)                         ; %f - source</td></tr><tr><th id="L576"><a href="#L576">576</a></th><td>           (list-push (attr 'source) result))</td></tr><tr><th id="L577"><a href="#L577">577</a></th><td>          ((?#)                         ; %# - id</td></tr><tr><th id="L578"><a href="#L578">578</a></th><td>           (list-push (format "%d" (attr 'id)) result))</td></tr><tr><th id="L579"><a href="#L579">579</a></th><td>          (t</td></tr><tr><th id="L580"><a href="#L580">580</a></th><td>           (list-push (char-to-string c) result)))</td></tr><tr><th id="L581"><a href="#L581">581</a></th><td>        )</td></tr><tr><th id="L582"><a href="#L582">582</a></th><td>      (list-push (substring format-str cursor) result)</td></tr><tr><th id="L583"><a href="#L583">583</a></th><td>      (let ((formatted-status (apply 'concat (nreverse result))))</td></tr><tr><th id="L584"><a href="#L584">584</a></th><td>        (add-text-properties 0 (length formatted-status)</td></tr><tr><th id="L585"><a href="#L585">585</a></th><td>                             `(username ,(attr 'user-screen-name))</td></tr><tr><th id="L586"><a href="#L586">586</a></th><td>                             formatted-status)</td></tr><tr><th id="L587"><a href="#L587">587</a></th><td>        formatted-status)</td></tr><tr><th id="L588"><a href="#L588">588</a></th><td>      )))</td></tr><tr><th id="L589"><a href="#L589">589</a></th><td></td></tr><tr><th id="L590"><a href="#L590">590</a></th><td>(defun twittering-http-post</td></tr><tr><th id="L591"><a href="#L591">591</a></th><td>  (method-class method &amp;optional parameters contents sentinel)</td></tr><tr><th id="L592"><a href="#L592">592</a></th><td>  "Send HTTP POST request to twitter.com</td></tr><tr><th id="L593"><a href="#L593">593</a></th><td></td></tr><tr><th id="L594"><a href="#L594">594</a></th><td>METHOD-CLASS must be one of Twitter API method classes</td></tr><tr><th id="L595"><a href="#L595">595</a></th><td> (statuses, users or direct_messages).</td></tr><tr><th id="L596"><a href="#L596">596</a></th><td>METHOD must be one of Twitter API method which belongs to METHOD-CLASS.</td></tr><tr><th id="L597"><a href="#L597">597</a></th><td>PARAMETERS is alist of URI parameters.</td></tr><tr><th id="L598"><a href="#L598">598</a></th><td> ex) ((\"mode\" . \"view\") (\"page\" . \"6\")) =&gt; &lt;URI&gt;?mode=view&amp;page=6"</td></tr><tr><th id="L599"><a href="#L599">599</a></th><td>  (if (null sentinel) (setq sentinel 'twittering-http-post-default-sentinel))</td></tr><tr><th id="L600"><a href="#L600">600</a></th><td></td></tr><tr><th id="L601"><a href="#L601">601</a></th><td>  ;; clear the buffer</td></tr><tr><th id="L602"><a href="#L602">602</a></th><td>  (save-excursion</td></tr><tr><th id="L603"><a href="#L603">603</a></th><td>    (set-buffer (twittering-http-buffer))</td></tr><tr><th id="L604"><a href="#L604">604</a></th><td>    (erase-buffer))</td></tr><tr><th id="L605"><a href="#L605">605</a></th><td></td></tr><tr><th id="L606"><a href="#L606">606</a></th><td>  (let (proc server port</td></tr><tr><th id="L607"><a href="#L607">607</a></th><td>             (proxy-user twittering-proxy-user)</td></tr><tr><th id="L608"><a href="#L608">608</a></th><td>             (proxy-password twittering-proxy-password))</td></tr><tr><th id="L609"><a href="#L609">609</a></th><td>    (progn</td></tr><tr><th id="L610"><a href="#L610">610</a></th><td>      (if (and twittering-proxy-use twittering-proxy-server)</td></tr><tr><th id="L611"><a href="#L611">611</a></th><td>          (setq server twittering-proxy-server</td></tr><tr><th id="L612"><a href="#L612">612</a></th><td>                port (if (integerp twittering-proxy-port)</td></tr><tr><th id="L613"><a href="#L613">613</a></th><td>                         (int-to-string twittering-proxy-port)</td></tr><tr><th id="L614"><a href="#L614">614</a></th><td>                       twittering-proxy-port))</td></tr><tr><th id="L615"><a href="#L615">615</a></th><td>        (setq server "twitter.com"</td></tr><tr><th id="L616"><a href="#L616">616</a></th><td>              port "80"))</td></tr><tr><th id="L617"><a href="#L617">617</a></th><td>      (setq proc</td></tr><tr><th id="L618"><a href="#L618">618</a></th><td>            (open-network-stream</td></tr><tr><th id="L619"><a href="#L619">619</a></th><td>             "network-connection-process" (twittering-http-buffer)</td></tr><tr><th id="L620"><a href="#L620">620</a></th><td>             server (string-to-number port)))</td></tr><tr><th id="L621"><a href="#L621">621</a></th><td>      (set-process-sentinel proc sentinel)</td></tr><tr><th id="L622"><a href="#L622">622</a></th><td>      (process-send-string</td></tr><tr><th id="L623"><a href="#L623">623</a></th><td>       proc</td></tr><tr><th id="L624"><a href="#L624">624</a></th><td>       (let ((nl "\r\n")</td></tr><tr><th id="L625"><a href="#L625">625</a></th><td>             request)</td></tr><tr><th id="L626"><a href="#L626">626</a></th><td>         (setq  request</td></tr><tr><th id="L627"><a href="#L627">627</a></th><td>                (concat "POST http://twitter.com/" method-class "/" method ".xml"</td></tr><tr><th id="L628"><a href="#L628">628</a></th><td>                        (when parameters</td></tr><tr><th id="L629"><a href="#L629">629</a></th><td>                          (concat "?"</td></tr><tr><th id="L630"><a href="#L630">630</a></th><td>                                  (mapconcat</td></tr><tr><th id="L631"><a href="#L631">631</a></th><td>                                   (lambda (param-pair)</td></tr><tr><th id="L632"><a href="#L632">632</a></th><td>                                     (format "%s=%s"</td></tr><tr><th id="L633"><a href="#L633">633</a></th><td>                                             (twittering-percent-encode (car param-pair))</td></tr><tr><th id="L634"><a href="#L634">634</a></th><td>                                             (twittering-percent-encode (cdr param-pair))))</td></tr><tr><th id="L635"><a href="#L635">635</a></th><td>                                   parameters</td></tr><tr><th id="L636"><a href="#L636">636</a></th><td>                                   "&amp;")))</td></tr><tr><th id="L637"><a href="#L637">637</a></th><td>                        " HTTP/1.1" nl</td></tr><tr><th id="L638"><a href="#L638">638</a></th><td>                        "Host: twitter.com" nl</td></tr><tr><th id="L639"><a href="#L639">639</a></th><td>                        "User-Agent: " (twittering-user-agent) nl</td></tr><tr><th id="L640"><a href="#L640">640</a></th><td>                        "Authorization: Basic "</td></tr><tr><th id="L641"><a href="#L641">641</a></th><td>                        (base64-encode-string</td></tr><tr><th id="L642"><a href="#L642">642</a></th><td>                         (concat twittering-username ":" (twittering-get-password)))</td></tr><tr><th id="L643"><a href="#L643">643</a></th><td>                        nl</td></tr><tr><th id="L644"><a href="#L644">644</a></th><td>                        "Content-Type: text/plain" nl</td></tr><tr><th id="L645"><a href="#L645">645</a></th><td>                        "Content-Length: 0" nl</td></tr><tr><th id="L646"><a href="#L646">646</a></th><td>                        (when twittering-proxy-use</td></tr><tr><th id="L647"><a href="#L647">647</a></th><td>                          "Proxy-Connection: Keep-Alive" nl</td></tr><tr><th id="L648"><a href="#L648">648</a></th><td>                          (when (and proxy-user proxy-password)</td></tr><tr><th id="L649"><a href="#L649">649</a></th><td>                            (concat</td></tr><tr><th id="L650"><a href="#L650">650</a></th><td>                             "Proxy-Authorization: Basic "</td></tr><tr><th id="L651"><a href="#L651">651</a></th><td>                             (base64-encode-string</td></tr><tr><th id="L652"><a href="#L652">652</a></th><td>                              (concat proxy-user ":"</td></tr><tr><th id="L653"><a href="#L653">653</a></th><td>                                      proxy-password))</td></tr><tr><th id="L654"><a href="#L654">654</a></th><td>                             nl)))</td></tr><tr><th id="L655"><a href="#L655">655</a></th><td>                        nl))</td></tr><tr><th id="L656"><a href="#L656">656</a></th><td>         (debug-print (concat "POST Request\n" request))</td></tr><tr><th id="L657"><a href="#L657">657</a></th><td>         request)))))</td></tr><tr><th id="L658"><a href="#L658">658</a></th><td></td></tr><tr><th id="L659"><a href="#L659">659</a></th><td>(defun twittering-http-post-default-sentinel (proc stat &amp;optional suc-msg)</td></tr><tr><th id="L660"><a href="#L660">660</a></th><td></td></tr><tr><th id="L661"><a href="#L661">661</a></th><td>  (condition-case err-signal</td></tr><tr><th id="L662"><a href="#L662">662</a></th><td>      (let ((header (twittering-get-response-header))</td></tr><tr><th id="L663"><a href="#L663">663</a></th><td>            ;; (body (twittering-get-response-body)) not used now.</td></tr><tr><th id="L664"><a href="#L664">664</a></th><td>            (status nil))</td></tr><tr><th id="L665"><a href="#L665">665</a></th><td>        (string-match "HTTP/1\.1 \\([a-z0-9 ]+\\)\r?\n" header)</td></tr><tr><th id="L666"><a href="#L666">666</a></th><td>        (setq status (match-string-no-properties 1 header))</td></tr><tr><th id="L667"><a href="#L667">667</a></th><td>        (case-string status</td></tr><tr><th id="L668"><a href="#L668">668</a></th><td>                     (("200 OK")</td></tr><tr><th id="L669"><a href="#L669">669</a></th><td>                      (message (if suc-msg suc-msg "Success: Post")))</td></tr><tr><th id="L670"><a href="#L670">670</a></th><td>                     (t (message status)))</td></tr><tr><th id="L671"><a href="#L671">671</a></th><td>        )</td></tr><tr><th id="L672"><a href="#L672">672</a></th><td>    (error (message (prin1-to-string err-signal))))</td></tr><tr><th id="L673"><a href="#L673">673</a></th><td>  )</td></tr><tr><th id="L674"><a href="#L674">674</a></th><td></td></tr><tr><th id="L675"><a href="#L675">675</a></th><td>(defun twittering-get-response-header (&amp;optional buffer)</td></tr><tr><th id="L676"><a href="#L676">676</a></th><td>  "Exract HTTP response header from HTTP response.</td></tr><tr><th id="L677"><a href="#L677">677</a></th><td>`buffer' may be a buffer or the name of an existing buffer.</td></tr><tr><th id="L678"><a href="#L678">678</a></th><td> If `buffer' is omitted, the value of `twittering-http-buffer' is used as `buffer'."</td></tr><tr><th id="L679"><a href="#L679">679</a></th><td>  (if (stringp buffer) (setq buffer (get-buffer buffer)))</td></tr><tr><th id="L680"><a href="#L680">680</a></th><td>  (if (null buffer) (setq buffer (twittering-http-buffer)))</td></tr><tr><th id="L681"><a href="#L681">681</a></th><td>  (save-excursion</td></tr><tr><th id="L682"><a href="#L682">682</a></th><td>    (set-buffer buffer)</td></tr><tr><th id="L683"><a href="#L683">683</a></th><td>    (let ((content (buffer-string)))</td></tr><tr><th id="L684"><a href="#L684">684</a></th><td>      (substring content 0 (string-match "\r?\n\r?\n" content)))))</td></tr><tr><th id="L685"><a href="#L685">685</a></th><td></td></tr><tr><th id="L686"><a href="#L686">686</a></th><td>(defun twittering-get-response-body (&amp;optional buffer)</td></tr><tr><th id="L687"><a href="#L687">687</a></th><td>  "Exract HTTP response body from HTTP response, parse it as XML, and return a</td></tr><tr><th id="L688"><a href="#L688">688</a></th><td>XML tree as list. `buffer' may be a buffer or the name of an existing buffer. If</td></tr><tr><th id="L689"><a href="#L689">689</a></th><td>`buffer' is omitted, the value of `twittering-http-buffer' is used as `buffer'."</td></tr><tr><th id="L690"><a href="#L690">690</a></th><td>  (if (stringp buffer) (setq buffer (get-buffer buffer)))</td></tr><tr><th id="L691"><a href="#L691">691</a></th><td>  (if (null buffer) (setq buffer (twittering-http-buffer)))</td></tr><tr><th id="L692"><a href="#L692">692</a></th><td>  (save-excursion</td></tr><tr><th id="L693"><a href="#L693">693</a></th><td>    (set-buffer buffer)</td></tr><tr><th id="L694"><a href="#L694">694</a></th><td>    (let ((content (buffer-string)))</td></tr><tr><th id="L695"><a href="#L695">695</a></th><td>      (let ((content (buffer-string)))</td></tr><tr><th id="L696"><a href="#L696">696</a></th><td>        (xml-parse-region (+ (string-match "\r?\n\r?\n" content)</td></tr><tr><th id="L697"><a href="#L697">697</a></th><td>                             (length (match-string 0 content)))</td></tr><tr><th id="L698"><a href="#L698">698</a></th><td>                          (point-max)))</td></tr><tr><th id="L699"><a href="#L699">699</a></th><td>      )))</td></tr><tr><th id="L700"><a href="#L700">700</a></th><td></td></tr><tr><th id="L701"><a href="#L701">701</a></th><td>(defun twittering-cache-status-datum (status-datum &amp;optional data-var)</td></tr><tr><th id="L702"><a href="#L702">702</a></th><td>  "Cache status datum into data-var(default twittering-timeline-data)</td></tr><tr><th id="L703"><a href="#L703">703</a></th><td>If STATUS-DATUM is already in DATA-VAR, return nil. If not, return t."</td></tr><tr><th id="L704"><a href="#L704">704</a></th><td>  (if (null data-var)</td></tr><tr><th id="L705"><a href="#L705">705</a></th><td>      (setf data-var 'twittering-timeline-data))</td></tr><tr><th id="L706"><a href="#L706">706</a></th><td>  (let ((id (cdr (assq 'id status-datum))))</td></tr><tr><th id="L707"><a href="#L707">707</a></th><td>    (if (or (null (symbol-value data-var))</td></tr><tr><th id="L708"><a href="#L708">708</a></th><td>            (not (find-if</td></tr><tr><th id="L709"><a href="#L709">709</a></th><td>                  (lambda (item)</td></tr><tr><th id="L710"><a href="#L710">710</a></th><td>                    (eql id (cdr (assq 'id item))))</td></tr><tr><th id="L711"><a href="#L711">711</a></th><td>                  (symbol-value data-var))))</td></tr><tr><th id="L712"><a href="#L712">712</a></th><td>        (progn</td></tr><tr><th id="L713"><a href="#L713">713</a></th><td>          (if twittering-jojo-mode</td></tr><tr><th id="L714"><a href="#L714">714</a></th><td>              (twittering-update-jojo (cdr (assq 'user-screen-name</td></tr><tr><th id="L715"><a href="#L715">715</a></th><td>                                                 status-datum))</td></tr><tr><th id="L716"><a href="#L716">716</a></th><td>                                      (cdr (assq 'text status-datum))))</td></tr><tr><th id="L717"><a href="#L717">717</a></th><td>          (set data-var (cons status-datum (symbol-value data-var)))</td></tr><tr><th id="L718"><a href="#L718">718</a></th><td>          t)</td></tr><tr><th id="L719"><a href="#L719">719</a></th><td>      nil)))</td></tr><tr><th id="L720"><a href="#L720">720</a></th><td></td></tr><tr><th id="L721"><a href="#L721">721</a></th><td>(defun twittering-status-to-status-datum (status)</td></tr><tr><th id="L722"><a href="#L722">722</a></th><td>  (flet ((assq-get (item seq)</td></tr><tr><th id="L723"><a href="#L723">723</a></th><td>                   (car (cddr (assq item seq)))))</td></tr><tr><th id="L724"><a href="#L724">724</a></th><td>    (let* ((status-data (cddr status))</td></tr><tr><th id="L725"><a href="#L725">725</a></th><td>           id text source created-at truncated</td></tr><tr><th id="L726"><a href="#L726">726</a></th><td>           (user-data (cddr (assq 'user status-data)))</td></tr><tr><th id="L727"><a href="#L727">727</a></th><td>           user-id user-name</td></tr><tr><th id="L728"><a href="#L728">728</a></th><td>           user-screen-name</td></tr><tr><th id="L729"><a href="#L729">729</a></th><td>           user-location</td></tr><tr><th id="L730"><a href="#L730">730</a></th><td>           user-description</td></tr><tr><th id="L731"><a href="#L731">731</a></th><td>           user-profile-image-url</td></tr><tr><th id="L732"><a href="#L732">732</a></th><td>           user-url</td></tr><tr><th id="L733"><a href="#L733">733</a></th><td>           user-protected</td></tr><tr><th id="L734"><a href="#L734">734</a></th><td>           regex-index)</td></tr><tr><th id="L735"><a href="#L735">735</a></th><td></td></tr><tr><th id="L736"><a href="#L736">736</a></th><td>      (setq id (string-to-number (assq-get 'id status-data)))</td></tr><tr><th id="L737"><a href="#L737">737</a></th><td>      (setq text (twittering-decode-html-entities</td></tr><tr><th id="L738"><a href="#L738">738</a></th><td>                  (assq-get 'text status-data)))</td></tr><tr><th id="L739"><a href="#L739">739</a></th><td>      (setq source (twittering-decode-html-entities</td></tr><tr><th id="L740"><a href="#L740">740</a></th><td>                    (assq-get 'source status-data)))</td></tr><tr><th id="L741"><a href="#L741">741</a></th><td>      (setq created-at (assq-get 'created_at status-data))</td></tr><tr><th id="L742"><a href="#L742">742</a></th><td>      (setq truncated (assq-get 'truncated status-data))</td></tr><tr><th id="L743"><a href="#L743">743</a></th><td>      (setq user-id (string-to-number (assq-get 'id user-data)))</td></tr><tr><th id="L744"><a href="#L744">744</a></th><td>      (setq user-name (twittering-decode-html-entities</td></tr><tr><th id="L745"><a href="#L745">745</a></th><td>                       (assq-get 'name user-data)))</td></tr><tr><th id="L746"><a href="#L746">746</a></th><td>      (setq user-screen-name (twittering-decode-html-entities</td></tr><tr><th id="L747"><a href="#L747">747</a></th><td>                              (assq-get 'screen_name user-data)))</td></tr><tr><th id="L748"><a href="#L748">748</a></th><td>      (setq user-location (twittering-decode-html-entities</td></tr><tr><th id="L749"><a href="#L749">749</a></th><td>                           (assq-get 'location user-data)))</td></tr><tr><th id="L750"><a href="#L750">750</a></th><td>      (setq user-description (twittering-decode-html-entities</td></tr><tr><th id="L751"><a href="#L751">751</a></th><td>                              (assq-get 'description user-data)))</td></tr><tr><th id="L752"><a href="#L752">752</a></th><td>      (setq user-profile-image-url (assq-get 'profile_image_url user-data))</td></tr><tr><th id="L753"><a href="#L753">753</a></th><td>      (setq user-url (assq-get 'url user-data))</td></tr><tr><th id="L754"><a href="#L754">754</a></th><td>      (setq user-protected (assq-get 'protected user-data))</td></tr><tr><th id="L755"><a href="#L755">755</a></th><td></td></tr><tr><th id="L756"><a href="#L756">756</a></th><td>      ;; make username clickable</td></tr><tr><th id="L757"><a href="#L757">757</a></th><td>      (add-text-properties</td></tr><tr><th id="L758"><a href="#L758">758</a></th><td>       0 (length user-name)</td></tr><tr><th id="L759"><a href="#L759">759</a></th><td>       `(mouse-face highlight</td></tr><tr><th id="L760"><a href="#L760">760</a></th><td>                    uri ,(concat "http://twitter.com/" user-screen-name)</td></tr><tr><th id="L761"><a href="#L761">761</a></th><td>                    face twittering-username-face)</td></tr><tr><th id="L762"><a href="#L762">762</a></th><td>       user-name)</td></tr><tr><th id="L763"><a href="#L763">763</a></th><td></td></tr><tr><th id="L764"><a href="#L764">764</a></th><td>      ;; make screen-name clickable</td></tr><tr><th id="L765"><a href="#L765">765</a></th><td>      (add-text-properties</td></tr><tr><th id="L766"><a href="#L766">766</a></th><td>       0 (length user-screen-name)</td></tr><tr><th id="L767"><a href="#L767">767</a></th><td>       `(mouse-face highlight</td></tr><tr><th id="L768"><a href="#L768">768</a></th><td>                    face twittering-username-face</td></tr><tr><th id="L769"><a href="#L769">769</a></th><td>                    uri ,(concat "http://twitter.com/" user-screen-name)</td></tr><tr><th id="L770"><a href="#L770">770</a></th><td>                    face twittering-username-face)</td></tr><tr><th id="L771"><a href="#L771">771</a></th><td>       user-screen-name)</td></tr><tr><th id="L772"><a href="#L772">772</a></th><td></td></tr><tr><th id="L773"><a href="#L773">773</a></th><td>      ;; make URI clickable</td></tr><tr><th id="L774"><a href="#L774">774</a></th><td>      (setq regex-index 0)</td></tr><tr><th id="L775"><a href="#L775">775</a></th><td>      (while regex-index</td></tr><tr><th id="L776"><a href="#L776">776</a></th><td>        (setq regex-index</td></tr><tr><th id="L777"><a href="#L777">777</a></th><td>              (string-match "@\\([_a-zA-Z0-9]+\\)\\|\\(https?://[-_.!~*'()a-zA-Z0-9;/?:@&amp;=+$,%#]+\\)"</td></tr><tr><th id="L778"><a href="#L778">778</a></th><td>                            text</td></tr><tr><th id="L779"><a href="#L779">779</a></th><td>                            regex-index))</td></tr><tr><th id="L780"><a href="#L780">780</a></th><td>        (when regex-index</td></tr><tr><th id="L781"><a href="#L781">781</a></th><td>          (let* ((matched-string (match-string-no-properties 0 text))</td></tr><tr><th id="L782"><a href="#L782">782</a></th><td>                 (screen-name (match-string-no-properties 1 text))</td></tr><tr><th id="L783"><a href="#L783">783</a></th><td>                 (uri (match-string-no-properties 2 text)))</td></tr><tr><th id="L784"><a href="#L784">784</a></th><td>            (add-text-properties</td></tr><tr><th id="L785"><a href="#L785">785</a></th><td>             (if screen-name</td></tr><tr><th id="L786"><a href="#L786">786</a></th><td>                 (+ 1 (match-beginning 0))</td></tr><tr><th id="L787"><a href="#L787">787</a></th><td>               (match-beginning 0))</td></tr><tr><th id="L788"><a href="#L788">788</a></th><td>             (match-end 0)</td></tr><tr><th id="L789"><a href="#L789">789</a></th><td>             (if screen-name</td></tr><tr><th id="L790"><a href="#L790">790</a></th><td>                 `(mouse-face</td></tr><tr><th id="L791"><a href="#L791">791</a></th><td>                   highlight</td></tr><tr><th id="L792"><a href="#L792">792</a></th><td>                   face twittering-uri-face</td></tr><tr><th id="L793"><a href="#L793">793</a></th><td>                   uri ,(concat "http://twitter.com/" screen-name))</td></tr><tr><th id="L794"><a href="#L794">794</a></th><td>               `(mouse-face highlight</td></tr><tr><th id="L795"><a href="#L795">795</a></th><td>                            face twittering-uri-face</td></tr><tr><th id="L796"><a href="#L796">796</a></th><td>                            uri ,uri))</td></tr><tr><th id="L797"><a href="#L797">797</a></th><td>             text))</td></tr><tr><th id="L798"><a href="#L798">798</a></th><td>          (setq regex-index (match-end 0)) ))</td></tr><tr><th id="L799"><a href="#L799">799</a></th><td></td></tr><tr><th id="L800"><a href="#L800">800</a></th><td></td></tr><tr><th id="L801"><a href="#L801">801</a></th><td>      ;; make source pretty and clickable</td></tr><tr><th id="L802"><a href="#L802">802</a></th><td>      (if (string-match "&lt;a href=\"\\(.*\\)\"&gt;\\(.*\\)&lt;/a&gt;" source)</td></tr><tr><th id="L803"><a href="#L803">803</a></th><td>          (let ((uri (match-string-no-properties 1 source))</td></tr><tr><th id="L804"><a href="#L804">804</a></th><td>                (caption (match-string-no-properties 2 source)))</td></tr><tr><th id="L805"><a href="#L805">805</a></th><td>            (setq source caption)</td></tr><tr><th id="L806"><a href="#L806">806</a></th><td>            (add-text-properties</td></tr><tr><th id="L807"><a href="#L807">807</a></th><td>             0 (length source)</td></tr><tr><th id="L808"><a href="#L808">808</a></th><td>             `(mouse-face highlight</td></tr><tr><th id="L809"><a href="#L809">809</a></th><td>                          uri ,uri</td></tr><tr><th id="L810"><a href="#L810">810</a></th><td>                          face twittering-uri-face</td></tr><tr><th id="L811"><a href="#L811">811</a></th><td>                          source ,source)</td></tr><tr><th id="L812"><a href="#L812">812</a></th><td>             source)</td></tr><tr><th id="L813"><a href="#L813">813</a></th><td>            ))</td></tr><tr><th id="L814"><a href="#L814">814</a></th><td></td></tr><tr><th id="L815"><a href="#L815">815</a></th><td>      ;; save last update time</td></tr><tr><th id="L816"><a href="#L816">816</a></th><td>      (setq twittering-timeline-last-update created-at)</td></tr><tr><th id="L817"><a href="#L817">817</a></th><td></td></tr><tr><th id="L818"><a href="#L818">818</a></th><td>      (mapcar</td></tr><tr><th id="L819"><a href="#L819">819</a></th><td>       (lambda (sym)</td></tr><tr><th id="L820"><a href="#L820">820</a></th><td>         `(,sym . ,(symbol-value sym)))</td></tr><tr><th id="L821"><a href="#L821">821</a></th><td>       '(id text source created-at truncated</td></tr><tr><th id="L822"><a href="#L822">822</a></th><td>            user-id user-name user-screen-name user-location</td></tr><tr><th id="L823"><a href="#L823">823</a></th><td>            user-description</td></tr><tr><th id="L824"><a href="#L824">824</a></th><td>            user-profile-image-url</td></tr><tr><th id="L825"><a href="#L825">825</a></th><td>            user-url</td></tr><tr><th id="L826"><a href="#L826">826</a></th><td>            user-protected)))))</td></tr><tr><th id="L827"><a href="#L827">827</a></th><td></td></tr><tr><th id="L828"><a href="#L828">828</a></th><td>(defun twittering-xmltree-to-status (xmltree)</td></tr><tr><th id="L829"><a href="#L829">829</a></th><td>  (mapcar #'twittering-status-to-status-datum</td></tr><tr><th id="L830"><a href="#L830">830</a></th><td>          ;; quirk to treat difference between xml.el in Emacs21 and Emacs22</td></tr><tr><th id="L831"><a href="#L831">831</a></th><td>          ;; On Emacs22, there may be blank strings</td></tr><tr><th id="L832"><a href="#L832">832</a></th><td>          (let ((ret nil) (statuses (reverse (cddr (car xmltree)))))</td></tr><tr><th id="L833"><a href="#L833">833</a></th><td>            (while statuses</td></tr><tr><th id="L834"><a href="#L834">834</a></th><td>              (if (consp (car statuses))</td></tr><tr><th id="L835"><a href="#L835">835</a></th><td>                  (setq ret (cons (car statuses) ret)))</td></tr><tr><th id="L836"><a href="#L836">836</a></th><td>              (setq statuses (cdr statuses)))</td></tr><tr><th id="L837"><a href="#L837">837</a></th><td>            ret)))</td></tr><tr><th id="L838"><a href="#L838">838</a></th><td></td></tr><tr><th id="L839"><a href="#L839">839</a></th><td>(defun twittering-percent-encode (str &amp;optional coding-system)</td></tr><tr><th id="L840"><a href="#L840">840</a></th><td>  (if (or (null coding-system)</td></tr><tr><th id="L841"><a href="#L841">841</a></th><td>          (not (coding-system-p coding-system)))</td></tr><tr><th id="L842"><a href="#L842">842</a></th><td>      (setq coding-system 'utf-8))</td></tr><tr><th id="L843"><a href="#L843">843</a></th><td>  (mapconcat</td></tr><tr><th id="L844"><a href="#L844">844</a></th><td>   (lambda (c)</td></tr><tr><th id="L845"><a href="#L845">845</a></th><td>     (cond</td></tr><tr><th id="L846"><a href="#L846">846</a></th><td>      ((twittering-url-reserved-p c)</td></tr><tr><th id="L847"><a href="#L847">847</a></th><td>       (char-to-string c))</td></tr><tr><th id="L848"><a href="#L848">848</a></th><td>      ((eq c ? ) "+")</td></tr><tr><th id="L849"><a href="#L849">849</a></th><td>      (t (format "%%%x" c))))</td></tr><tr><th id="L850"><a href="#L850">850</a></th><td>   (encode-coding-string str coding-system)</td></tr><tr><th id="L851"><a href="#L851">851</a></th><td>   ""))</td></tr><tr><th id="L852"><a href="#L852">852</a></th><td></td></tr><tr><th id="L853"><a href="#L853">853</a></th><td>(defun twittering-url-reserved-p (ch)</td></tr><tr><th id="L854"><a href="#L854">854</a></th><td>  (or (and (&lt;= ?A ch) (&lt;= ch ?z))</td></tr><tr><th id="L855"><a href="#L855">855</a></th><td>      (and (&lt;= ?0 ch) (&lt;= ch ?9))</td></tr><tr><th id="L856"><a href="#L856">856</a></th><td>      (eq ?. ch)</td></tr><tr><th id="L857"><a href="#L857">857</a></th><td>      (eq ?- ch)</td></tr><tr><th id="L858"><a href="#L858">858</a></th><td>      (eq ?_ ch)</td></tr><tr><th id="L859"><a href="#L859">859</a></th><td>      (eq ?~ ch)))</td></tr><tr><th id="L860"><a href="#L860">860</a></th><td></td></tr><tr><th id="L861"><a href="#L861">861</a></th><td>(defun twittering-decode-html-entities (encoded-str)</td></tr><tr><th id="L862"><a href="#L862">862</a></th><td>  (if encoded-str</td></tr><tr><th id="L863"><a href="#L863">863</a></th><td>      (let ((cursor 0)</td></tr><tr><th id="L864"><a href="#L864">864</a></th><td>            (found-at nil)</td></tr><tr><th id="L865"><a href="#L865">865</a></th><td>            (result '()))</td></tr><tr><th id="L866"><a href="#L866">866</a></th><td>        (while (setq found-at</td></tr><tr><th id="L867"><a href="#L867">867</a></th><td>                     (string-match "&amp;\\(#\\([0-9]+\\)\\|\\([A-Za-z]+\\)\\);"</td></tr><tr><th id="L868"><a href="#L868">868</a></th><td>                                   encoded-str cursor))</td></tr><tr><th id="L869"><a href="#L869">869</a></th><td>          (when (&gt; found-at cursor)</td></tr><tr><th id="L870"><a href="#L870">870</a></th><td>            (list-push (substring encoded-str cursor found-at) result))</td></tr><tr><th id="L871"><a href="#L871">871</a></th><td>          (let ((number-entity (match-string-no-properties 2 encoded-str))</td></tr><tr><th id="L872"><a href="#L872">872</a></th><td>                (letter-entity (match-string-no-properties 3 encoded-str)))</td></tr><tr><th id="L873"><a href="#L873">873</a></th><td>            (cond (number-entity</td></tr><tr><th id="L874"><a href="#L874">874</a></th><td>                   (list-push</td></tr><tr><th id="L875"><a href="#L875">875</a></th><td>                    (char-to-string</td></tr><tr><th id="L876"><a href="#L876">876</a></th><td>                     (twittering-ucs-to-char</td></tr><tr><th id="L877"><a href="#L877">877</a></th><td>                      (string-to-number number-entity))) result))</td></tr><tr><th id="L878"><a href="#L878">878</a></th><td>                  (letter-entity</td></tr><tr><th id="L879"><a href="#L879">879</a></th><td>                   (cond ((string= "gt" letter-entity) (list-push "&gt;" result))</td></tr><tr><th id="L880"><a href="#L880">880</a></th><td>                         ((string= "lt" letter-entity) (list-push "&lt;" result))</td></tr><tr><th id="L881"><a href="#L881">881</a></th><td>                         (t (list-push "?" result))))</td></tr><tr><th id="L882"><a href="#L882">882</a></th><td>                  (t (list-push "?" result)))</td></tr><tr><th id="L883"><a href="#L883">883</a></th><td>            (setq cursor (match-end 0))))</td></tr><tr><th id="L884"><a href="#L884">884</a></th><td>        (list-push (substring encoded-str cursor) result)</td></tr><tr><th id="L885"><a href="#L885">885</a></th><td>        (apply 'concat (nreverse result)))</td></tr><tr><th id="L886"><a href="#L886">886</a></th><td>    ""))</td></tr><tr><th id="L887"><a href="#L887">887</a></th><td></td></tr><tr><th id="L888"><a href="#L888">888</a></th><td>(defun twittering-timer-action (func)</td></tr><tr><th id="L889"><a href="#L889">889</a></th><td>  (let ((buf (get-buffer twittering-buffer)))</td></tr><tr><th id="L890"><a href="#L890">890</a></th><td>    (if (null buf)</td></tr><tr><th id="L891"><a href="#L891">891</a></th><td>        (twittering-stop)</td></tr><tr><th id="L892"><a href="#L892">892</a></th><td>      (funcall func)</td></tr><tr><th id="L893"><a href="#L893">893</a></th><td>      )))</td></tr><tr><th id="L894"><a href="#L894">894</a></th><td></td></tr><tr><th id="L895"><a href="#L895">895</a></th><td>(defun twittering-update-status-if-not-blank (status)</td></tr><tr><th id="L896"><a href="#L896">896</a></th><td>  (if (string-match "^\\s-*\\(?:@[-_a-z0-9]+\\)?\\s-*$" status)</td></tr><tr><th id="L897"><a href="#L897">897</a></th><td>      nil</td></tr><tr><th id="L898"><a href="#L898">898</a></th><td>    (twittering-http-post "statuses" "update"</td></tr><tr><th id="L899"><a href="#L899">899</a></th><td>                          `(("status" . ,status)</td></tr><tr><th id="L900"><a href="#L900">900</a></th><td>                            ("source" . "twmode")))</td></tr><tr><th id="L901"><a href="#L901">901</a></th><td>    t))</td></tr><tr><th id="L902"><a href="#L902">902</a></th><td></td></tr><tr><th id="L903"><a href="#L903">903</a></th><td>(defun twittering-update-status-from-minibuffer (&amp;optional init-str)</td></tr><tr><th id="L904"><a href="#L904">904</a></th><td>  (if (null init-str) (setq init-str ""))</td></tr><tr><th id="L905"><a href="#L905">905</a></th><td>  (let ((status init-str) (not-posted-p t))</td></tr><tr><th id="L906"><a href="#L906">906</a></th><td>    (while not-posted-p</td></tr><tr><th id="L907"><a href="#L907">907</a></th><td>      (setq status (read-from-minibuffer "status: " status nil nil nil nil t))</td></tr><tr><th id="L908"><a href="#L908">908</a></th><td>      (setq not-posted-p</td></tr><tr><th id="L909"><a href="#L909">909</a></th><td>            (not (twittering-update-status-if-not-blank status))))))</td></tr><tr><th id="L910"><a href="#L910">910</a></th><td></td></tr><tr><th id="L911"><a href="#L911">911</a></th><td>(defun twittering-update-lambda ()</td></tr><tr><th id="L912"><a href="#L912">912</a></th><td>  (interactive)</td></tr><tr><th id="L913"><a href="#L913">913</a></th><td>  (twittering-http-post</td></tr><tr><th id="L914"><a href="#L914">914</a></th><td>   "statuses" "update"</td></tr><tr><th id="L915"><a href="#L915">915</a></th><td>   `(("status" . "\xd34b\xd22b\xd26f\xd224\xd224\xd268\xd34b")</td></tr><tr><th id="L916"><a href="#L916">916</a></th><td>     ("source" . "twmode"))))</td></tr><tr><th id="L917"><a href="#L917">917</a></th><td></td></tr><tr><th id="L918"><a href="#L918">918</a></th><td>(defun twittering-update-jojo (usr msg)</td></tr><tr><th id="L919"><a href="#L919">919</a></th><td>  (if (string-match "\xde21\xd24b\\(\xd22a\xe0b0\\|\xdaae\xe6cd\\)\xd24f\xd0d6\\([^\xd0d7]+\\)\xd0d7\xd248\xdc40\xd226"</td></tr><tr><th id="L920"><a href="#L920">920</a></th><td>                    msg)</td></tr><tr><th id="L921"><a href="#L921">921</a></th><td>      (twittering-http-post</td></tr><tr><th id="L922"><a href="#L922">922</a></th><td>       "statuses" "update"</td></tr><tr><th id="L923"><a href="#L923">923</a></th><td>       `(("status" . ,(concat</td></tr><tr><th id="L924"><a href="#L924">924</a></th><td>                       "@" usr " "</td></tr><tr><th id="L925"><a href="#L925">925</a></th><td>                       (match-string-no-properties 2 msg)</td></tr><tr><th id="L926"><a href="#L926">926</a></th><td>                       "\xd0a1\xd24f\xd243!?"))</td></tr><tr><th id="L927"><a href="#L927">927</a></th><td>         ("source" . "twmode")))))</td></tr><tr><th id="L928"><a href="#L928">928</a></th><td></td></tr><tr><th id="L929"><a href="#L929">929</a></th><td>;;;</td></tr><tr><th id="L930"><a href="#L930">930</a></th><td>;;; Commands</td></tr><tr><th id="L931"><a href="#L931">931</a></th><td>;;;</td></tr><tr><th id="L932"><a href="#L932">932</a></th><td></td></tr><tr><th id="L933"><a href="#L933">933</a></th><td>(defun twittering-start (&amp;optional action)</td></tr><tr><th id="L934"><a href="#L934">934</a></th><td>  (interactive)</td></tr><tr><th id="L935"><a href="#L935">935</a></th><td>  (if (null action)</td></tr><tr><th id="L936"><a href="#L936">936</a></th><td>      (setq action #'twittering-current-timeline))</td></tr><tr><th id="L937"><a href="#L937">937</a></th><td>  (if twittering-timer</td></tr><tr><th id="L938"><a href="#L938">938</a></th><td>      nil</td></tr><tr><th id="L939"><a href="#L939">939</a></th><td>    (setq twittering-timer</td></tr><tr><th id="L940"><a href="#L940">940</a></th><td>          (run-at-time "0 sec"</td></tr><tr><th id="L941"><a href="#L941">941</a></th><td>                       twittering-timer-interval</td></tr><tr><th id="L942"><a href="#L942">942</a></th><td>                       #'twittering-timer-action action))))</td></tr><tr><th id="L943"><a href="#L943">943</a></th><td></td></tr><tr><th id="L944"><a href="#L944">944</a></th><td>(defun twittering-stop ()</td></tr><tr><th id="L945"><a href="#L945">945</a></th><td>  (interactive)</td></tr><tr><th id="L946"><a href="#L946">946</a></th><td>  (cancel-timer twittering-timer)</td></tr><tr><th id="L947"><a href="#L947">947</a></th><td>  (setq twittering-timer nil))</td></tr><tr><th id="L948"><a href="#L948">948</a></th><td></td></tr><tr><th id="L949"><a href="#L949">949</a></th><td>(defun twittering-get-timeline (method)</td></tr><tr><th id="L950"><a href="#L950">950</a></th><td>  (if (not (eq twittering-last-timeline-retrieved method))</td></tr><tr><th id="L951"><a href="#L951">951</a></th><td>      (setq twittering-timeline-last-update nil</td></tr><tr><th id="L952"><a href="#L952">952</a></th><td>            twittering-timeline-data nil))</td></tr><tr><th id="L953"><a href="#L953">953</a></th><td>  (setq twittering-last-timeline-retrieved method)</td></tr><tr><th id="L954"><a href="#L954">954</a></th><td>  (let ((buf (get-buffer twittering-buffer)))</td></tr><tr><th id="L955"><a href="#L955">955</a></th><td>    (if (not buf)</td></tr><tr><th id="L956"><a href="#L956">956</a></th><td>        (twittering-stop)</td></tr><tr><th id="L957"><a href="#L957">957</a></th><td>      (if (not twittering-timeline-last-update)</td></tr><tr><th id="L958"><a href="#L958">958</a></th><td>          (twittering-http-get "statuses" method)</td></tr><tr><th id="L959"><a href="#L959">959</a></th><td>        (let* ((system-time-locale "C")</td></tr><tr><th id="L960"><a href="#L960">960</a></th><td>               (since</td></tr><tr><th id="L961"><a href="#L961">961</a></th><td>                (twittering-global-strftime</td></tr><tr><th id="L962"><a href="#L962">962</a></th><td>                 "%a, %d %b %Y %H:%M:%S GMT"</td></tr><tr><th id="L963"><a href="#L963">963</a></th><td>                 twittering-timeline-last-update)))</td></tr><tr><th id="L964"><a href="#L964">964</a></th><td>          (twittering-http-get "statuses" method</td></tr><tr><th id="L965"><a href="#L965">965</a></th><td>                               `(("since" . ,since)))))))</td></tr><tr><th id="L966"><a href="#L966">966</a></th><td></td></tr><tr><th id="L967"><a href="#L967">967</a></th><td>  (if twittering-icon-mode</td></tr><tr><th id="L968"><a href="#L968">968</a></th><td>      (if twittering-image-stack</td></tr><tr><th id="L969"><a href="#L969">969</a></th><td>          (let ((proc</td></tr><tr><th id="L970"><a href="#L970">970</a></th><td>                 (apply</td></tr><tr><th id="L971"><a href="#L971">971</a></th><td>                  #'start-process</td></tr><tr><th id="L972"><a href="#L972">972</a></th><td>                  "wget-images"</td></tr><tr><th id="L973"><a href="#L973">973</a></th><td>                  (twittering-wget-buffer)</td></tr><tr><th id="L974"><a href="#L974">974</a></th><td>                  "wget"</td></tr><tr><th id="L975"><a href="#L975">975</a></th><td>                  (format "--directory-prefix=%s" twittering-tmp-dir)</td></tr><tr><th id="L976"><a href="#L976">976</a></th><td>                  "--no-clobber"</td></tr><tr><th id="L977"><a href="#L977">977</a></th><td>                  "--quiet"</td></tr><tr><th id="L978"><a href="#L978">978</a></th><td>                  twittering-image-stack)))</td></tr><tr><th id="L979"><a href="#L979">979</a></th><td>            (set-process-sentinel</td></tr><tr><th id="L980"><a href="#L980">980</a></th><td>             proc</td></tr><tr><th id="L981"><a href="#L981">981</a></th><td>             (lambda (proc stat)</td></tr><tr><th id="L982"><a href="#L982">982</a></th><td>               (clear-image-cache)</td></tr><tr><th id="L983"><a href="#L983">983</a></th><td>               (save-excursion</td></tr><tr><th id="L984"><a href="#L984">984</a></th><td>                 (set-buffer (twittering-wget-buffer))</td></tr><tr><th id="L985"><a href="#L985">985</a></th><td>                 )))))))</td></tr><tr><th id="L986"><a href="#L986">986</a></th><td></td></tr><tr><th id="L987"><a href="#L987">987</a></th><td>(defun twittering-friends-timeline ()</td></tr><tr><th id="L988"><a href="#L988">988</a></th><td>  (interactive)</td></tr><tr><th id="L989"><a href="#L989">989</a></th><td>  (twittering-get-timeline "friends_timeline"))</td></tr><tr><th id="L990"><a href="#L990">990</a></th><td></td></tr><tr><th id="L991"><a href="#L991">991</a></th><td>(defun twittering-replies-timeline ()</td></tr><tr><th id="L992"><a href="#L992">992</a></th><td>  (interactive)</td></tr><tr><th id="L993"><a href="#L993">993</a></th><td>  (twittering-get-timeline "replies"))</td></tr><tr><th id="L994"><a href="#L994">994</a></th><td></td></tr><tr><th id="L995"><a href="#L995">995</a></th><td>(defun twittering-public-timeline ()</td></tr><tr><th id="L996"><a href="#L996">996</a></th><td>  (interactive)</td></tr><tr><th id="L997"><a href="#L997">997</a></th><td>  (twittering-get-timeline "public_timeline"))</td></tr><tr><th id="L998"><a href="#L998">998</a></th><td></td></tr><tr><th id="L999"><a href="#L999">999</a></th><td>(defun twittering-user-timeline ()</td></tr><tr><th id="L1000"><a href="#L1000">1000</a></th><td>  (interactive)</td></tr><tr><th id="L1001"><a href="#L1001">1001</a></th><td>  (twittering-get-timeline "user_timeline"))</td></tr><tr><th id="L1002"><a href="#L1002">1002</a></th><td></td></tr><tr><th id="L1003"><a href="#L1003">1003</a></th><td>(defun twittering-current-timeline ()</td></tr><tr><th id="L1004"><a href="#L1004">1004</a></th><td>  (interactive)</td></tr><tr><th id="L1005"><a href="#L1005">1005</a></th><td>  (if (not twittering-last-timeline-retrieved)</td></tr><tr><th id="L1006"><a href="#L1006">1006</a></th><td>      (setq twittering-last-timeline-retrieved "friends_timeline"))</td></tr><tr><th id="L1007"><a href="#L1007">1007</a></th><td>  (twittering-get-timeline twittering-last-timeline-retrieved))</td></tr><tr><th id="L1008"><a href="#L1008">1008</a></th><td></td></tr><tr><th id="L1009"><a href="#L1009">1009</a></th><td>(defun twittering-update-status-interactive ()</td></tr><tr><th id="L1010"><a href="#L1010">1010</a></th><td>  (interactive)</td></tr><tr><th id="L1011"><a href="#L1011">1011</a></th><td>  (twittering-update-status-from-minibuffer))</td></tr><tr><th id="L1012"><a href="#L1012">1012</a></th><td></td></tr><tr><th id="L1013"><a href="#L1013">1013</a></th><td>(defun twittering-erase-old-statuses ()</td></tr><tr><th id="L1014"><a href="#L1014">1014</a></th><td>  (interactive)</td></tr><tr><th id="L1015"><a href="#L1015">1015</a></th><td>  (setq twittering-timeline-data nil)</td></tr><tr><th id="L1016"><a href="#L1016">1016</a></th><td>  (if (not twittering-last-timeline-retrieved)</td></tr><tr><th id="L1017"><a href="#L1017">1017</a></th><td>      (setq twittering-last-timeline-retrieved "friends_timeline"))</td></tr><tr><th id="L1018"><a href="#L1018">1018</a></th><td>  (if (not twittering-timeline-last-update)</td></tr><tr><th id="L1019"><a href="#L1019">1019</a></th><td>      (twittering-http-get "statuses" twittering-last-timeline-retrieved)</td></tr><tr><th id="L1020"><a href="#L1020">1020</a></th><td>    (let* ((system-time-locale "C")</td></tr><tr><th id="L1021"><a href="#L1021">1021</a></th><td>           (since</td></tr><tr><th id="L1022"><a href="#L1022">1022</a></th><td>            (twittering-global-strftime</td></tr><tr><th id="L1023"><a href="#L1023">1023</a></th><td>             "%a, %d %b %Y %H:%M:%S GMT"</td></tr><tr><th id="L1024"><a href="#L1024">1024</a></th><td>             twittering-timeline-last-update)))</td></tr><tr><th id="L1025"><a href="#L1025">1025</a></th><td>      (twittering-http-get "statuses" twittering-last-timeline-retrieved</td></tr><tr><th id="L1026"><a href="#L1026">1026</a></th><td>                           `(("since" . ,since))))))</td></tr><tr><th id="L1027"><a href="#L1027">1027</a></th><td></td></tr><tr><th id="L1028"><a href="#L1028">1028</a></th><td>(defun twittering-click ()</td></tr><tr><th id="L1029"><a href="#L1029">1029</a></th><td>  (interactive)</td></tr><tr><th id="L1030"><a href="#L1030">1030</a></th><td>  (let ((uri (get-text-property (point) 'uri)))</td></tr><tr><th id="L1031"><a href="#L1031">1031</a></th><td>    (if uri</td></tr><tr><th id="L1032"><a href="#L1032">1032</a></th><td>        (browse-url uri))))</td></tr><tr><th id="L1033"><a href="#L1033">1033</a></th><td></td></tr><tr><th id="L1034"><a href="#L1034">1034</a></th><td>(defun twittering-enter ()</td></tr><tr><th id="L1035"><a href="#L1035">1035</a></th><td>  (interactive)</td></tr><tr><th id="L1036"><a href="#L1036">1036</a></th><td>  (let ((username (get-text-property (point) 'username))</td></tr><tr><th id="L1037"><a href="#L1037">1037</a></th><td>        (uri (get-text-property (point) 'uri)))</td></tr><tr><th id="L1038"><a href="#L1038">1038</a></th><td>    (if username</td></tr><tr><th id="L1039"><a href="#L1039">1039</a></th><td>        (twittering-update-status-from-minibuffer (concat "@" username " "))</td></tr><tr><th id="L1040"><a href="#L1040">1040</a></th><td>      (if uri</td></tr><tr><th id="L1041"><a href="#L1041">1041</a></th><td>          (browse-url uri)))))</td></tr><tr><th id="L1042"><a href="#L1042">1042</a></th><td></td></tr><tr><th id="L1043"><a href="#L1043">1043</a></th><td>(defun twittering-view-user-page ()</td></tr><tr><th id="L1044"><a href="#L1044">1044</a></th><td>  (interactive)</td></tr><tr><th id="L1045"><a href="#L1045">1045</a></th><td>  (let ((uri (get-text-property (point) 'uri)))</td></tr><tr><th id="L1046"><a href="#L1046">1046</a></th><td>    (if uri</td></tr><tr><th id="L1047"><a href="#L1047">1047</a></th><td>        (browse-url uri))))</td></tr><tr><th id="L1048"><a href="#L1048">1048</a></th><td></td></tr><tr><th id="L1049"><a href="#L1049">1049</a></th><td>(defun twittering-reply-to-user ()</td></tr><tr><th id="L1050"><a href="#L1050">1050</a></th><td>  (interactive)</td></tr><tr><th id="L1051"><a href="#L1051">1051</a></th><td>  (let ((username (get-text-property (point) 'username)))</td></tr><tr><th id="L1052"><a href="#L1052">1052</a></th><td>    (if username</td></tr><tr><th id="L1053"><a href="#L1053">1053</a></th><td>        (twittering-update-status-from-minibuffer (concat "@" username " ")))))</td></tr><tr><th id="L1054"><a href="#L1054">1054</a></th><td></td></tr><tr><th id="L1055"><a href="#L1055">1055</a></th><td>(defun twittering-get-password ()</td></tr><tr><th id="L1056"><a href="#L1056">1056</a></th><td>  (or twittering-password</td></tr><tr><th id="L1057"><a href="#L1057">1057</a></th><td>      (setq twittering-password (read-passwd "twittering-mode: "))))</td></tr><tr><th id="L1058"><a href="#L1058">1058</a></th><td></td></tr><tr><th id="L1059"><a href="#L1059">1059</a></th><td>(defun twittering-goto-next-status ()</td></tr><tr><th id="L1060"><a href="#L1060">1060</a></th><td>  "Go to next status."</td></tr><tr><th id="L1061"><a href="#L1061">1061</a></th><td>  (interactive)</td></tr><tr><th id="L1062"><a href="#L1062">1062</a></th><td>  (let ((pos))</td></tr><tr><th id="L1063"><a href="#L1063">1063</a></th><td>    (setq pos (twittering-get-next-username-face-pos (point)))</td></tr><tr><th id="L1064"><a href="#L1064">1064</a></th><td>    (if pos</td></tr><tr><th id="L1065"><a href="#L1065">1065</a></th><td>        (goto-char pos)</td></tr><tr><th id="L1066"><a href="#L1066">1066</a></th><td>      (message "End of status."))))</td></tr><tr><th id="L1067"><a href="#L1067">1067</a></th><td></td></tr><tr><th id="L1068"><a href="#L1068">1068</a></th><td>(defun twittering-get-next-username-face-pos (pos)</td></tr><tr><th id="L1069"><a href="#L1069">1069</a></th><td>  (interactive)</td></tr><tr><th id="L1070"><a href="#L1070">1070</a></th><td>  (let ((prop))</td></tr><tr><th id="L1071"><a href="#L1071">1071</a></th><td>    (catch 'not-found</td></tr><tr><th id="L1072"><a href="#L1072">1072</a></th><td>      (while (and pos (not (eq prop twittering-username-face)))</td></tr><tr><th id="L1073"><a href="#L1073">1073</a></th><td>        (setq pos (next-single-property-change pos 'face))</td></tr><tr><th id="L1074"><a href="#L1074">1074</a></th><td>        (when (eq pos nil) (throw 'not-found nil))</td></tr><tr><th id="L1075"><a href="#L1075">1075</a></th><td>        (setq prop (get-text-property pos 'face)))</td></tr><tr><th id="L1076"><a href="#L1076">1076</a></th><td>      pos)))</td></tr><tr><th id="L1077"><a href="#L1077">1077</a></th><td></td></tr><tr><th id="L1078"><a href="#L1078">1078</a></th><td>(defun twittering-goto-previous-status ()</td></tr><tr><th id="L1079"><a href="#L1079">1079</a></th><td>  "Go to previous status."</td></tr><tr><th id="L1080"><a href="#L1080">1080</a></th><td>  (interactive)</td></tr><tr><th id="L1081"><a href="#L1081">1081</a></th><td>  (let ((pos))</td></tr><tr><th id="L1082"><a href="#L1082">1082</a></th><td>    (setq pos (twittering-get-previous-username-face-pos (point)))</td></tr><tr><th id="L1083"><a href="#L1083">1083</a></th><td>    (if pos</td></tr><tr><th id="L1084"><a href="#L1084">1084</a></th><td>        (goto-char pos)</td></tr><tr><th id="L1085"><a href="#L1085">1085</a></th><td>      (message "Start of status."))))</td></tr><tr><th id="L1086"><a href="#L1086">1086</a></th><td></td></tr><tr><th id="L1087"><a href="#L1087">1087</a></th><td>(defun twittering-get-previous-username-face-pos (pos)</td></tr><tr><th id="L1088"><a href="#L1088">1088</a></th><td>  (interactive)</td></tr><tr><th id="L1089"><a href="#L1089">1089</a></th><td>  (let ((prop))</td></tr><tr><th id="L1090"><a href="#L1090">1090</a></th><td>    (catch 'not-found</td></tr><tr><th id="L1091"><a href="#L1091">1091</a></th><td>      (while (and pos (not (eq prop twittering-username-face)))</td></tr><tr><th id="L1092"><a href="#L1092">1092</a></th><td>        (setq pos (previous-single-property-change pos 'face))</td></tr><tr><th id="L1093"><a href="#L1093">1093</a></th><td>        (when (eq pos nil) (throw 'not-found nil))</td></tr><tr><th id="L1094"><a href="#L1094">1094</a></th><td>        (setq prop (get-text-property pos 'face)))</td></tr><tr><th id="L1095"><a href="#L1095">1095</a></th><td>      pos)))</td></tr><tr><th id="L1096"><a href="#L1096">1096</a></th><td></td></tr><tr><th id="L1097"><a href="#L1097">1097</a></th><td>(defun twittering-goto-next-status-of-user ()</td></tr><tr><th id="L1098"><a href="#L1098">1098</a></th><td>  "Go to next status of user."</td></tr><tr><th id="L1099"><a href="#L1099">1099</a></th><td>  (interactive)</td></tr><tr><th id="L1100"><a href="#L1100">1100</a></th><td>  (let ((user-name (twittering-get-username-at-pos (point)))</td></tr><tr><th id="L1101"><a href="#L1101">1101</a></th><td>        (pos (twittering-get-next-username-face-pos (point))))</td></tr><tr><th id="L1102"><a href="#L1102">1102</a></th><td>    (while (and (not (eq pos nil))</td></tr><tr><th id="L1103"><a href="#L1103">1103</a></th><td>                (not (equal (twittering-get-username-at-pos pos) user-name)))</td></tr><tr><th id="L1104"><a href="#L1104">1104</a></th><td>      (setq pos (twittering-get-next-username-face-pos pos)))</td></tr><tr><th id="L1105"><a href="#L1105">1105</a></th><td>    (if pos</td></tr><tr><th id="L1106"><a href="#L1106">1106</a></th><td>        (goto-char pos)</td></tr><tr><th id="L1107"><a href="#L1107">1107</a></th><td>      (if user-name</td></tr><tr><th id="L1108"><a href="#L1108">1108</a></th><td>          (message "End of %s's status." user-name)</td></tr><tr><th id="L1109"><a href="#L1109">1109</a></th><td>        (message "Invalid user-name.")))))</td></tr><tr><th id="L1110"><a href="#L1110">1110</a></th><td></td></tr><tr><th id="L1111"><a href="#L1111">1111</a></th><td>(defun twittering-goto-previous-status-of-user ()</td></tr><tr><th id="L1112"><a href="#L1112">1112</a></th><td>  "Go to previous status of user."</td></tr><tr><th id="L1113"><a href="#L1113">1113</a></th><td>  (interactive)</td></tr><tr><th id="L1114"><a href="#L1114">1114</a></th><td>  (let ((user-name (twittering-get-username-at-pos (point)))</td></tr><tr><th id="L1115"><a href="#L1115">1115</a></th><td>        (pos (twittering-get-previous-username-face-pos (point))))</td></tr><tr><th id="L1116"><a href="#L1116">1116</a></th><td>    (while (and (not (eq pos nil))</td></tr><tr><th id="L1117"><a href="#L1117">1117</a></th><td>                (not (equal (twittering-get-username-at-pos pos) user-name)))</td></tr><tr><th id="L1118"><a href="#L1118">1118</a></th><td>      (setq pos (twittering-get-previous-username-face-pos pos)))</td></tr><tr><th id="L1119"><a href="#L1119">1119</a></th><td>    (if pos</td></tr><tr><th id="L1120"><a href="#L1120">1120</a></th><td>        (goto-char pos)</td></tr><tr><th id="L1121"><a href="#L1121">1121</a></th><td>      (if user-name</td></tr><tr><th id="L1122"><a href="#L1122">1122</a></th><td>          (message "Start of %s's status." user-name)</td></tr><tr><th id="L1123"><a href="#L1123">1123</a></th><td>        (message "Invalid user-name.")))))</td></tr><tr><th id="L1124"><a href="#L1124">1124</a></th><td></td></tr><tr><th id="L1125"><a href="#L1125">1125</a></th><td>(defun twittering-get-username-at-pos (pos)</td></tr><tr><th id="L1126"><a href="#L1126">1126</a></th><td>  (let ((start-pos pos)</td></tr><tr><th id="L1127"><a href="#L1127">1127</a></th><td>        (end-pos))</td></tr><tr><th id="L1128"><a href="#L1128">1128</a></th><td>    (catch 'not-found</td></tr><tr><th id="L1129"><a href="#L1129">1129</a></th><td>      (while (eq (get-text-property start-pos 'face) twittering-username-face)</td></tr><tr><th id="L1130"><a href="#L1130">1130</a></th><td>        (setq start-pos (1- start-pos))</td></tr><tr><th id="L1131"><a href="#L1131">1131</a></th><td>        (when (or (eq start-pos nil) (eq start-pos 0)) (throw 'not-found nil)))</td></tr><tr><th id="L1132"><a href="#L1132">1132</a></th><td>      (setq start-pos (1+ start-pos))</td></tr><tr><th id="L1133"><a href="#L1133">1133</a></th><td>      (setq end-pos (next-single-property-change pos 'face))</td></tr><tr><th id="L1134"><a href="#L1134">1134</a></th><td>      (buffer-substring start-pos end-pos))))</td></tr><tr><th id="L1135"><a href="#L1135">1135</a></th><td></td></tr><tr><th id="L1136"><a href="#L1136">1136</a></th><td>(defun twittering-get-status-url (username id)</td></tr><tr><th id="L1137"><a href="#L1137">1137</a></th><td>  "Generate status URL."</td></tr><tr><th id="L1138"><a href="#L1138">1138</a></th><td>  (format "http://twitter.com/%s/statuses/%d" username id))</td></tr><tr><th id="L1139"><a href="#L1139">1139</a></th><td></td></tr><tr><th id="L1140"><a href="#L1140">1140</a></th><td>;;;###autoload</td></tr><tr><th id="L1141"><a href="#L1141">1141</a></th><td>(defun twit ()</td></tr><tr><th id="L1142"><a href="#L1142">1142</a></th><td>  "Start twittering-mode."</td></tr><tr><th id="L1143"><a href="#L1143">1143</a></th><td>  (interactive)</td></tr><tr><th id="L1144"><a href="#L1144">1144</a></th><td>  (twittering-mode))</td></tr><tr><th id="L1145"><a href="#L1145">1145</a></th><td></td></tr><tr><th id="L1146"><a href="#L1146">1146</a></th><td>(provide 'twittering-mode)</td></tr><tr><th id="L1147"><a href="#L1147">1147</a></th><td>;;; twittering.el ends here</td></tr></tbody></table>
      </div>
      <div id="help">
        <strong>Note:</strong> See <a href="/share/trac.cgi/wiki/TracBrowser">TracBrowser</a>
        for help on using the browser.
      </div>
      <div id="anydiff">
        <form action="/share/trac.cgi/diff" method="get">
          <div class="buttons">
            <input type="hidden" name="new_path" value="/lang/elisp/twittering-mode/trunk/twittering-mode.el" />
            <input type="hidden" name="old_path" value="/lang/elisp/twittering-mode/trunk/twittering-mode.el" />
            <input type="hidden" name="new_rev" value="81" />
            <input type="hidden" name="old_rev" value="81" />
            <input type="submit" value="View changes..." title="Select paths and revs for Diff" />
          </div>
        </form>
      </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="first">
          <a rel="nofollow" href="/share/trac.cgi/browser/lang/elisp/twittering-mode/trunk/twittering-mode.el?format=txt">Plain Text</a>
        </li><li class="last">
          <a rel="nofollow" href="/share/trac.cgi/export/133/lang/elisp/twittering-mode/trunk/twittering-mode.el">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/share/trac.cgi/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">
        Powered by <a href="/share/trac.cgi/about"><strong>Trac 0.11</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.
      </p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>